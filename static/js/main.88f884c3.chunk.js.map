{"version":3,"sources":["services/firebase.ts","services/loginService.ts","components/Navbar/Navbar.tsx","services/ascensionService.ts","hooks/useAsyncRequest.ts","services/dictionaryService.ts","components/Answers/Answers.tsx","components/LetterCard/LetterCard.tsx","components/Scramble/Scramble.tsx","hooks/useTimer.ts","hooks/useInterval.ts","components/Timer/Timer.tsx","hooks/useEventEmitter.ts","components/Question/Question.tsx","components/Quiz/Quiz.tsx","components/AscensionQuiz/AscensionQuiz.tsx","containers/NetworkedAscensionQuiz/NetworkedAscensionQuiz.tsx","pages/AscensionQuizPage/AscensionQuizPage.tsx","components/CardboxSummary/CardboxSummary.tsx","components/CardboxList/CardboxList.tsx","services/cardboxService.ts","containers/NetworkedCardboxList/NetworkedCardboxList.tsx","pages/CardboxListPage/CardboxListPage.tsx","components/CardboxQuiz/CardboxQuiz.tsx","containers/NetworkedCardboxQuiz/NetworkedCardboxQuiz.tsx","pages/CardboxQuizPage/CardboxQuizPage.tsx","components/EditCardbox/EditCardbox.tsx","containers/NetworkedEditCardbox/NetworkedEditCardbox.tsx","pages/EditCardboxPage/EditCardboxPage.tsx","components/CreateCardbox/CreateCardbox.tsx","containers/NetworkedCreateCardbox/NetworkedCreateCardbox.tsx","pages/CreateCardboxPage/CreateCardboxPage.tsx","components/QuickEdit/QuickEdit.tsx","containers/NetworkedQuickEdit/NetworkedQuickEdit.tsx","pages/QuickEditPage/QuickEditPage.tsx","components/Login/Login.tsx","containers/NetworkedLogin/NetworkedLogin.tsx","pages/LoginPage/LoginPage.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","appId","login","email","password","auth","signInWithEmailAndPassword","Navbar","className","to","getAscension","firestore","runTransaction","transaction","startNewCycle","waitingConundrums","shuffle","conundrums","map","c","join","set","doc","waiting","solved","unsolved","get","then","exists","data","length","ascension","items","arr","idx","jdx","Math","floor","random","useAsyncRequest","request","useState","undefined","result","setResult","error","setError","inProgress","setInProgress","isComplete","setIsComplete","doRequest","catch","wordsBeginningWith","word","index","indexInDictionary","words","aptodict","startsWith","push","lo","hi","mid","Answers","answers","ans","key","slice","w","LetterCard","letter","Scramble","scramble","char","useTimer","seconds","emitter","timeRemaining","setTimeRemaining","isRunning","setIsRunning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","time","max","emit","startTimer","stopTimer","progressBarStyle","remaining","duration","width","Timer","eventEmitter","on","style","Emitter","callbacks","event","this","forEach","cb","Question","onQuestionEnded","questionActive","setQuestionActive","setSolved","timerEmitter","containerRef","focus","startQuestion","answerQuestion","response","endQuestion","ref","tabIndex","onKeyPress","e","toUpperCase","onClick","newScramble","question","randomScramble","letters","lettersArr","Quiz","_questions","questions","recycle","setQuestions","questionIdx","setQuestionIdx","keyFromScramble","sort","AscensionQuiz","onQuestionAnswered","quizQuestions","con","split","lookupMap","Object","assign","NetworkedAscensionQuiz","conundrum","update","fb","FieldValue","arrayRemove","arrayUnion","recordConundrumAsSolved","recordConundrumAsUnsolved","AscensionQuizPage","CardboxSummary","name","size","hasQuestionsDue","CardboxList","cardboxes","cardbox","getCardbox","collection","getDueQuestions","where","getDueTimestamp","querySnapshot","cardboxRef","docs","filter","delete","increment","setDuration","addWords","wordsByKey","groupWordsByKey","Promise","all","keys","docRef","existingAnswers","some","includes","dedup","due","Timestamp","now","asked","answeredCorrectly","level","dueDate","Date","getHours","setDate","getDate","setHours","fromDate","Set","groups","getNewDueDate","newLevel","timeNow","daysToAdd","pow","min","nanoseconds","NetworkedCardboxList","limit","empty","CardboxListPage","CardboxQuiz","NetworkedCardboxQuiz","doCardboxRequest","cardboxResult","cardboxError","cardboxInProgress","doQuestionsRequest","questionsResult","questionsError","questionsInProgress","correct","newDueDate","newAsked","newAnsweredCorrectly","CardboxQuizPage","match","params","EditCardbox","_duration","onChangesSaved","setWords","onSubmit","preventDefault","type","required","value","onChange","target","NetworkedEditCardbox","afterChangesSaved","EditCardboxPage","isRedirecting","setIsRedirecting","CreateCardbox","onCreate","setName","NetworkedCreateCardbox","afterCreate","createCardbox","CreateCardboxPage","QuickEdit","actions","action","finally","performAction","addToHighProb","wordsInCardbox","wordsToAdd","highprob","ws","has","flatMap","addToHighProb9","highprob9","addTo5Vowels","fiveVowels","NetworkedQuickEdit","QuickEditPage","Login","doLogin","setEmail","setPassword","isLoggedIn","setIsLoggedIn","NetworkedLogin","LoginPage","App","basename","Routes","withRouter","loggedIn","currentUser","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8rm/FAWeA,G,YAAAA,IAASC,cAPT,CACXC,OAAQC,0CACRC,WAAYD,oCACZE,UAAWF,oBACXG,MAAOH,+CCNEI,EAAQ,SAACC,EAAeC,GAAhB,OACjBT,EAASU,OAAOC,2BAA2BH,EAAOC,ICWvCG,G,MAVU,WACrB,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,QACA,kBAAC,IAAD,CAAMD,UAAU,eAAeC,GAAG,cAAlC,aACA,kBAAC,IAAD,CAAMD,UAAU,eAAeC,GAAG,eAAlC,iB,eCECC,EAAe,WAExB,OAAOf,EAASgB,YAAYC,gBAAe,SAAAC,GAEvC,IAAMC,EAAgB,WAClB,IAAMC,EAAoBC,EAAQC,EAAWC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAK,SAC7DP,EAAYQ,IAAI1B,EAASgB,YAAYW,IAAI,uBAAwB,CAC7DC,QAASR,EACTS,OAAQ,GACRC,SAAU,MAYlB,OAAOZ,EAAYa,IAAI/B,EAASgB,YAAYW,IAAI,wBAAwBK,MAAK,SAAAL,GACzE,GAAKA,EAAIM,OAEF,CACH,IAAMC,EAAOP,EAAIO,OACW,IAAxBA,EAAKN,QAAQO,SACTD,EAAKJ,SAASK,OAAS,GAdTC,EAeOF,EAdjChB,EAAYQ,IAAI1B,EAASgB,YAAYW,IAAI,uBAAwB,CAC7DC,QAASQ,EAAUN,SACnBD,OAAQO,EAAUP,OAClBC,SAAU,MAaFX,UAPRA,IAVqB,IAACiB,QAuBjCJ,MAAK,kBAAMhC,EAASgB,YAAYW,IAAI,uBAAuBI,SAC3DC,MAAK,SAAAL,GAAG,OAAIA,EAAIO,WAiBfb,EAAU,SAAgBgB,GAE5B,IADA,IAAMC,EAAG,YAAOD,GACPE,EAAMD,EAAIH,OAAS,EAAGI,EAAM,EAAGA,GAAO,EAAG,CAC9C,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,IADA,EAEvB,CAACD,EAAIE,GAAMF,EAAIC,IAArCD,EAAIC,GAFyC,KAEnCD,EAAIE,GAF+B,KAIlD,OAAOF,G,OCrCIM,EAxBS,SAAWC,GAA6D,IAAD,EAE/DC,wBAAwBC,GAFuC,mBAEpFC,EAFoF,KAE5EC,EAF4E,OAGjEH,wBAAkCC,GAH+B,mBAGpFG,EAHoF,KAG7EC,EAH6E,OAIvDL,oBAAS,GAJ8C,mBAIpFM,EAJoF,KAIxEC,EAJwE,OAKvDP,oBAAS,GAL8C,mBAKpFQ,EALoF,KAKxEC,EALwE,KAqB3F,MAAO,CAAEC,UAdS,SAACtB,GAEf,OADAmB,GAAc,GAAOE,GAAc,GAAQN,OAAUF,GAAYI,OAASJ,GACnEF,EAAQX,GACVF,MAAK,SAAAgB,GACFC,EAAUD,GACVK,GAAc,GACdE,GAAc,MAEjBE,OAAM,SAACP,GACJC,OAAmBJ,IAAVG,GAA6BA,GACtCG,GAAc,OAINL,SAAQE,QAAOE,aAAYE,e,qCCvB7CI,EAAqB,SAACC,GACxB,IAAIC,EAAQC,EAAkBF,GAC9B,IAAe,IAAXC,EAAgB,MAAO,GAG3B,IADA,IAAME,EAAQ,GACPC,EAASH,GAAOI,WAAWL,KAC9BG,EAAMG,KAAKF,EAASH,MACdA,IAAUG,EAAS5B,UAG7B,OAAO2B,GAGLD,EAAoB,SAACF,GAIvB,IAHA,IAAIO,EAAK,EACLC,EAAKJ,EAAS5B,OAAS,EAEpB+B,IAAOC,GAAI,CACd,IAAIC,EAAM3B,KAAKC,OAAOwB,EAAKC,EAAK,GAAK,GACrC,GAAIJ,EAASK,KAAST,EAAQ,OAAOS,EAC5BL,EAASK,GAAOT,EAAQQ,EAAKC,EAC/BF,EAAKE,EAAM,EAGtB,OAAOL,EAASG,KAAQP,EAAOO,GAAM,GCZ1BG,G,MAZyB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvC,OACI,yBAAKzD,UAAU,WACX,wBAAIA,UAAU,iBACTyD,EAAQ/C,KAAI,SAACgD,EAAKhC,GAAN,OACT,wBAAIiC,IAAKjC,EAAK1B,UAAU,mBAAmB0D,EAA3C,MDRKZ,ECQsDY,EDP3Eb,EAAmBC,GAAMc,MAAM,GAAGlD,KAAI,SAAAmD,GAAC,OAAIA,EAAED,MAAMd,EAAKxB,YCOwBV,KAAK,KAArE,KDRI,IAACkC,SEQVgB,G,YAN+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,OACI,yBAAK/D,UAAU,eAAe+D,KCUvBC,EAV2B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzC,OACI,yBAAKjE,UAAU,YACV,YAAIiE,GAAUvD,KAAI,SAACwD,EAAMxC,GAAP,OACf,kBAAC,EAAD,CAAYiC,IAAKjC,EAAKqC,OAAQG,S,MCR/B,SAASC,EAASC,EAAiBC,GAAyB,IAAD,EAE5BpC,mBAASmC,GAFmB,mBAE/DE,EAF+D,KAEhDC,EAFgD,OAGpCtC,oBAAS,GAH2B,mBAG/DuC,EAH+D,KAGpDC,EAHoD,MCH3D,SAAqBC,EAAsBC,GAEtD,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACNF,EAAcG,QAAUL,IACzB,CAACA,IAEJI,qBAAU,WACN,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,aAAY,kBAAML,EAAcG,SAAWH,EAAcG,YAAWJ,GAC7E,OAAO,kBAAMO,cAAcF,OAEhC,CAACL,IDLJQ,EAAY,WACJb,EAAgB,EAChBC,GAAiB,SAAAa,GAAI,OAAIxD,KAAKyD,IAAI,EAAGD,EAAO,SAE5CX,GAAa,GACbJ,EAAQiB,KAAK,aAElBd,EAAY,GAAK,MAWpB,MAAO,CAAEe,WATU,WACfhB,EAAiBH,GACjBK,GAAa,IAOIe,UAJH,WACdf,GAAa,IAGeH,iBEjBpC,IAaMmB,EAAmB,SAACC,EAAmBC,GAApB,MAA0C,CAC/DC,MAAM,GAAD,OAAK,IAAMF,EAAYC,EAAvB,OAGME,EAjBqB,SAAC,GAA+B,IAA7BzB,EAA4B,EAA5BA,QAAS0B,EAAmB,EAAnBA,aAAmB,EAEd3B,EAASC,EAAS0B,GAA3DP,EAFuD,EAEvDA,WAAYC,EAF2C,EAE3CA,UAAWlB,EAFgC,EAEhCA,cAI/B,OAHAQ,qBAAU,kBAAMgB,EAAaC,GAAG,SAAS,kBAAMR,SAAe,IAC9DT,qBAAU,kBAAMgB,EAAaC,GAAG,QAAQ,kBAAMP,SAAc,IAGxD,yBAAKxF,UAAU,SACX,yBAAKA,UAAU,kBAAkBgG,MAAOP,EAAiBnB,EAAeF,O,gBCjBvE6B,EAAb,iDAEYC,UAA+C,GAF3D,iDAIgBC,EAAe9E,GACvB+E,KAAKF,UAAUC,IAAUC,KAAKF,UAAUC,GAAOE,SAAQ,SAAAC,GAAE,OAAIA,EAAGjF,QALxE,yBAQc8E,EAAeG,GAChBF,KAAKF,UAAUC,KAAQC,KAAKF,UAAUC,GAAS,IACpDC,KAAKF,UAAUC,GAAO/C,KAAKkD,OAVnC,KCeA,IA0DeC,EA1D2B,SAAC,GAA2D,IAAzD7E,EAAwD,EAAxDA,IAAKuC,EAAmD,EAAnDA,SAAUR,EAAyC,EAAzCA,QAASkC,EAAgC,EAAhCA,SAAUa,EAAsB,EAAtBA,gBAAsB,EAErDvE,oBAAS,GAF4C,mBAE1FwE,EAF0F,KAE1EC,EAF0E,OAGrEzE,oBAAS,GAH4D,mBAG1FjB,EAH0F,KAGlF2F,EAHkF,KAI3FC,EDJe3E,mBAAS,IAAIgE,GAAc,GCM1CY,EAAehC,iBAAuB,MAC5CC,qBAAU,WACN+B,EAAa9B,SAAW8B,EAAa9B,QAAQ+B,WAGjDhC,qBAAU,kBAAMiC,MAAiB,CAACrF,IAClCoD,qBAAU,kBAAM8B,EAAab,GAAG,UAAU,kBAAMiB,GAAe,QAAS,IAExE,IAAMD,EAAgB,WAClBL,GAAkB,GAClBE,EAAatB,KAAK,UAGhB0B,EAAiB,SAACC,GACpBP,GAAkB,GAClBC,EAAUM,GACVL,EAAatB,KAAK,SAGhB4B,EAAc,WAChBR,GAAkB,GAClBF,EAAgBxF,IAUpB,OACI,yBAAKhB,UAAU,WAAWmH,IAAKN,EAAcO,UAAW,EAAGC,WARxC,SAACC,GAChBb,GAA0C,MAAxBa,EAAE3D,IAAI4D,cAAuBP,GAAe,GACzDP,GAA0C,MAAxBa,EAAE3D,IAAI4D,cAAuBP,GAAe,GAC7DP,GAA0C,MAAxBa,EAAE3D,IAAI4D,cACxBd,GAA0C,MAAxBa,EAAE3D,IAAI4D,eAAuBL,IADAP,GAAW3F,KAMhE,yBAAKhB,UAAU,gCACX,kBAAC,EAAD,CAAUiE,SAAUA,IACpB,kBAAC,EAAD,CAAOG,QAASuB,EAAUG,aAAcc,KAE3CH,GAAkB,yBAAKzG,UAAU,sBAC9B,4BAAQA,UAAU,8DAA8DwH,QAAS,kBAAMR,GAAe,KAA9G,UACA,4BAAQhH,UAAU,8DAA8DwH,QAAS,kBAAMR,GAAe,KAA9G,YAEFP,GAAkB,yBAAKzG,UAAU,qBAC/B,kBAAC,EAAD,CAASyD,QAASA,IAClB,yBAAKzD,UAAU,qBACX,4BAAQA,UAAW,yDAA2DgB,EAAS,SAAW,UAAWwG,QAAS,kBAAMb,GAAW3F,KAAUA,EAAS,SAAW,UACrK,4BAAQhB,UAAU,4BAA4BwH,QAAS,kBAAMN,MAA7D,qBC3BdO,EAAc,SAACC,GAAD,sBACbA,EADa,CAEhBzD,SAAU0D,EAAeD,EAASzD,aAGhC0D,EAAiB,SAACC,GAEpB,IADA,IAAMC,EAAU,YAAOD,GACdlG,EAAMmG,EAAWvG,OAAS,EAAGI,EAAM,EAAGA,GAAO,EAAG,CACrD,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,IADO,EAEhB,CAACmG,EAAWlG,GAAMkG,EAAWnG,IAAjEmG,EAAWnG,GAFyC,KAEnCmG,EAAWlG,GAFwB,KAIzD,OAAOkG,EAAWjH,KAAK,KAGZkH,EAtCmB,SAAC,GAAmE,IAAtDC,EAAqD,EAAhEC,UAAuBrC,EAAyC,EAAzCA,SAAUsC,EAA+B,EAA/BA,QAASzB,EAAsB,EAAtBA,gBAAsB,EAE/DvE,mBAAS8F,GAFsD,mBAE1FC,EAF0F,KAE/EE,EAF+E,OAG3DjG,mBAAS,GAHkD,mBAG1FkG,EAH0F,KAG7EC,EAH6E,KAWjG,OACI,yBAAKpI,UAAU,QACVmI,GAAeH,EAAU1G,QAAU,yBAAKtB,UAAU,eAAf,sBAGnCmI,EAAcH,EAAU1G,QAAU,yBAAKtB,UAAU,kBAC9C,yBAAKA,UAAU,iBAAf,YAAyCmI,EAAc,EAAvD,OAA8DH,EAAU1G,QACxE,kBAAC,EAAD,CAAUI,IAAKyG,EAAalE,SAAU+D,EAAUG,GAAalE,SAAUR,QAASuE,EAAUG,GAAa1E,QAASkC,SAAUA,EAAUa,gBAb5H,SAACxF,GACjBwF,EAAgBwB,EAAUG,GAAalE,SAAUjD,IAC5CA,GAAUiH,GAASC,EAAa,GAAD,mBAAKF,GAAL,CAAgBP,EAAYO,EAAUG,OAC1EC,GAAe,SAAA1G,GAAG,OAAIA,EAAM,WCE9BlB,EAAU,SAAgBgB,GAE5B,IADA,IAAMC,EAAG,YAAOD,GACPE,EAAMD,EAAIH,OAAS,EAAGI,EAAM,EAAGA,GAAO,EAAG,CAC9C,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,IADA,EAEvB,CAACD,EAAIE,GAAMF,EAAIC,IAArCD,EAAIC,GAFyC,KAEnCD,EAAIE,GAF+B,KAIlD,OAAOF,GAGLkG,EAAiB,SAACC,GACpB,OAAOpH,EAAQ,YAAIoH,IAAUhH,KAAK,KAGhCyH,EAAkB,SAACpE,GAAD,OAAsB,YAAIA,GAAUqE,OAAO1H,KAAK,KAEzD2H,EA7BqC,SAAC,GAAiD,IAA/ChH,EAA8C,EAA9CA,UAAWoE,EAAmC,EAAnCA,SAAU6C,EAAyB,EAAzBA,mBAElEC,EAAgBjI,EAAQe,EAAUR,QAAQL,KAAI,SAAAgI,GAAG,MAAK,CACxDzE,SAAU0D,EAAee,EAAIC,MAAM,KAAK,IACxClF,QAASiF,EAAIC,MAAM,UAGjBC,EAAYC,OAAOC,OAAP,MAAAD,OAAM,CAAQ,IAAR,mBAAepI,EAAWC,KAAI,SAAAgI,GAAG,sBAAQL,EAAgBK,EAAI,IAAMA,EAAI9H,KAAK,YAEpG,OACI,kBAAC,EAAD,CAAMoH,UAAWS,EAAe9C,SAAUA,EAAUsC,SAAS,EAAOzB,gBAAiB,SAACvC,EAAUjD,GAAX,OAAsBwH,EAAmBI,EAAUP,EAAgBpE,IAAYjD,OCM7J+H,EAtB0B,WAAO,IAAD,EAEMhH,GAAgB,kBAC7D7B,OADIyC,EAFmC,EAEnCA,UAAWR,EAFwB,EAExBA,OAAQE,EAFgB,EAEhBA,MAQ3B,GAV2C,EAETE,iBAILL,IAAVG,QAAkCH,IAAXC,GACtCQ,EAAU,QAGCT,IAAXC,EAAwB,OAAO,8BAOnC,OACI,kBAAC,EAAD,CAAewD,SAAU,EAAGpE,UAAWY,EAAQqG,mBAN5B,SAACQ,EAAmBhI,GACnCA,Eb+B2B,SAACgI,GAC7B7J,EAASgB,YAAYW,IAAI,uBAAuBmI,OAAO,CAC1DlI,QAASmI,IAAG/I,UAAUgJ,WAAWC,YAAYJ,GAC7ChI,OAAQkI,IAAG/I,UAAUgJ,WAAWE,WAAWL,KalC/BM,CAAwBN,GbsCH,SAACA,GAC/B7J,EAASgB,YAAYW,IAAI,uBAAuBmI,OAAO,CAC1DlI,QAASmI,IAAG/I,UAAUgJ,WAAWC,YAAYJ,GAC7C/H,SAAUiI,IAAG/I,UAAUgJ,WAAWE,WAAWL,KaxCxCO,CAA0BP,OCXxBQ,EANqB,WAChC,OACI,kBAAC,EAAD,OCiBOC,G,YAbuC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACjE,OACI,yBAAK5J,UAAU,mBACX,yBAAKA,UAAU,yBAAyB0J,EAAxC,KAAgDC,EAAhD,KACA,yBAAK3J,UAAW,qDAAuD4J,EAAkB,MAAQ,UAAWA,EAAkB,gBAAkB,oBAChJ,yBAAK5J,UAAU,4BACX,kBAAC,IAAD,CAAMA,UAAU,0BAA0BC,GAAE,gBAAWyJ,IAAvD,QACA,kBAAC,IAAD,CAAM1J,UAAU,0BAA0BC,GAAE,iBAAYyJ,IAAxD,aCODG,EAdiC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC/C,OACI,yBAAK9J,UAAU,gBACV8J,EAAUpJ,KAAI,SAACqJ,EAASrI,GAAV,OACX,kBAAC,EAAD,iBAAoBqI,EAApB,CAA6BpG,IAAKjC,QAEtC,kBAAC,IAAD,CAAMzB,GAAG,UAAUD,UAAU,8BACzB,yBAAKA,UAAU,sCACf,yBAAKA,UAAU,2CCElBgK,EAAa,SAACD,GAAD,OACtB5K,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAAS7I,MAAMC,MAAK,SAAAL,GAAG,sBACjEA,EAAIO,OAD6D,CAEpEqI,KAAM5I,EAAIkE,SAiBLkF,EAAkB,SAACH,GAAD,OAC3B5K,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAASE,WAAW,aAChEE,MAAM,MAAO,KAAMC,KAAmBlJ,MAAMC,MAAK,SAAAkJ,GAC9C,IAAMC,EAAanL,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAChE/B,EAAwB,GAc5B,OAbAqC,EAAcE,KAAKlE,SAAQ,SAAAvF,GACvB,IAAM4G,EAAQ,eAAO5G,EAAIO,OAAX,CAAmBuG,QAAS9G,EAAIkE,KAC9C0C,EAASjE,QAAUiE,EAASjE,QAAQ+G,QAAO,SAAA9G,GACvC,Of7Ca,IAA7BV,Ee6CmCU,KACZ4G,EAAWrB,OAAO,CAAEhG,MAAOiG,IAAG/I,UAAUgJ,WAAWC,YAAY1F,MAAgB,MAE1D,IAA5BgE,EAASjE,QAAQnC,OACjBR,EAAIqG,IAAIsD,SAAStJ,MAAK,kBAAMmJ,EAAWrB,OAAO,CAAEU,KAAMT,IAAG/I,UAAUgJ,WAAWuB,WAAW,QAGzF1C,EAAU5E,KAAKsE,MAGhBM,MAcN2C,EAAc,SAACZ,EAAiBpE,GACzC,OAAOxG,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAASd,OAAO,CAAEtD,SAAUA,KAG3EiF,EAAW,SAACb,EAAiB9G,GACtC,IAAM4H,EAAaC,EAAgB7H,GACnC,OAAO8H,QAAQC,IAAInC,OAAOoC,KAAKJ,GAAYnK,KAAI,SAAAiD,GAAG,OAC9CxE,EAASgB,YAAYC,gBAAe,SAAAC,GAChC,IAAMiK,EAAanL,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAC9DmB,EAAS/L,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAASE,WAAW,aAAanJ,IAAI6C,GACrG,OAAOtD,EAAYa,IAAIgK,GAAQ/J,MAAK,SAAAL,GAChC,GAAKA,EAAIM,OAGF,CACH,IAAM+J,EAAmBrK,EAAIO,OAAoBoC,QAC7CoH,EAAWlH,GAAKyH,MAAK,SAAA1H,GAAG,OAAKyH,EAAgBE,SAAS3H,QACtDrD,EAAY4I,OAAOqB,EAAY,CAAErH,MAAOiG,IAAG/I,UAAUgJ,WAAWE,WAAWwB,EAAWlH,MACtFtD,EAAY4I,OAAOiC,EAAQ,CAAEzH,QAAS6H,EAAM,GAAD,mBAAKH,GAAL,YAAyBN,EAAWlH,MAAQ4H,IAAKrC,IAAG/I,UAAUqL,UAAUC,aAP1G,CAAC,IAAD,EACbpL,EAAY4I,OAAOqB,EAAY,CAAEX,KAAMT,IAAG/I,UAAUgJ,WAAWuB,UAAU,GAAIzH,OAAO,EAAAiG,IAAG/I,UAAUgJ,YAAWE,WAAxB,oBAAsCwB,EAAWlH,OACrItD,EAAYQ,IAAIqK,EAAQ,CAAEzH,QAASoH,EAAWlH,GAAM+H,MAAO,EAAGC,kBAAmB,EAAGC,MAAO,EAAGL,IAAKrC,IAAG/I,UAAUqL,UAAUC,oBA2BxIrB,EAAkB,WACpB,IAAMyB,EAAU,IAAIC,KAGpB,OAFID,EAAQE,YAAc,GAAGF,EAAQG,QAAQH,EAAQI,UAAY,GACjEJ,EAAQK,SAAS,EAAG,EAAG,EAAG,GACnBhD,IAAG/I,UAAUqL,UAAUW,SAASN,IAGrCP,EAAQ,SAACrI,GAAD,OAA+B,YAAI,IAAImJ,IAAInJ,IAAQqF,QAE3DwC,EAAkB,SAAC7H,GACrB,IAAMoJ,EAAoC,GAM1C,OALApJ,EAAMoD,SAAQ,SAAAvD,GACV,IAAMa,EAAM,YAAIb,GAAMwF,OAAO1H,KAAK,SACdsB,IAAhBmK,EAAO1I,KAAoB0I,EAAO1I,GAAO,IAC7C0I,EAAO1I,GAAKP,KAAKN,MAEduJ,GAGLC,EAAgB,SAACC,GACnB,IAAMC,EAAUtD,IAAG/I,UAAUqL,UAAUC,MAEjCgB,EAAyB,IAAbF,EAAiB,EAAI3K,KAAK8K,IAAI,EAAG9K,KAAK+K,IAAIJ,EAAU,GAAK,GAC3E,OAAO,IAAIrD,IAAG/I,UAAUqL,UAAUgB,EAAQpI,QAFrB,MAE8CqI,EAAWD,EAAQI,cChH3EC,GAjBwB,WAAO,IAAD,EAEQ9K,GAAgE,kBDmBjH5C,EAASgB,YAAY8J,WAAW,aAAa/I,MAAMC,MAAK,SAAAkJ,GAAa,OACjEA,EAAcE,KAAK7J,KAAI,SAAAI,GAAG,sBACnBA,EAAIO,OADe,CAEtBqI,KAAM5I,EAAIkE,WCrBC7D,MAAK,SAAA2I,GAAS,OAAIiB,QAAQC,IAAIlB,EAAUpJ,KAAI,SAAAqJ,GAAO,ODyB3C,SAACA,GAAD,OAC3B5K,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAASE,WAAW,aAChEE,MAAM,MAAO,KAAMC,KAAmB0C,MAAM,GAAG5L,MAAMC,MAAK,SAAAkJ,GAAa,OACnEA,EAAc0C,SC3BfnD,CAAgBG,EAAQL,MAAMvI,MAAK,SAAAoK,GAAG,MAAK,CAAE7B,KAAMK,EAAQL,KAAMC,KAAMI,EAAQJ,KAAMC,gBAAiB2B,gBAFtG5I,EAFiC,EAEjCA,UAAWR,EAFsB,EAEtBA,OAAQE,EAFc,EAEdA,MAU3B,OAZyC,EAEPE,iBAMLL,IAAVG,QAAkCH,IAAXC,GACtCQ,SAGWT,IAAXC,EAA+B,8BAE5B,kBAAC,EAAD,CAAa2H,UAAW3H,KCVpB6K,GANmB,WAC9B,OACI,kBAAC,GAAD,OCiBFxM,GAAU,SAAgBgB,GAE5B,IADA,IAAMC,EAAG,YAAOD,GACPE,EAAMD,EAAIH,OAAS,EAAGI,EAAM,EAAGA,GAAO,EAAG,CAC9C,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,IADA,EAEvB,CAACD,EAAIE,GAAMF,EAAIC,IAArCD,EAAIC,GAFyC,KAEnCD,EAAIE,GAF+B,KAIlD,OAAOF,GAGLkG,GAAiB,SAACC,GACpB,OAAOpH,GAAQ,YAAIoH,IAAUhH,KAAK,KAGhCyH,GAAkB,SAACpE,GAAD,OAAsB,YAAIA,GAAUqE,OAAO1H,KAAK,KAEzDqM,GA3BiC,SAAC,GAAiD,IAA/CjF,EAA8C,EAA9CA,UAAWrC,EAAmC,EAAnCA,SAAU6C,EAAyB,EAAzBA,mBAE9DC,EAAgBjI,GAAQwH,EAAUtH,KAAI,SAAAgH,GAAQ,MAAK,CACrDzD,SAAU0D,GAAeD,EAASE,SAClCnE,QAASiE,EAASjE,aAGtB,OACI,kBAAC,EAAD,CAAMuE,UAAWS,EAAe9C,SAAUA,EAAUsC,SAAS,EAAMzB,gBAAiB,SAACvC,EAAUjD,GAAX,OAAsBwH,EAAmBH,GAAgBpE,GAAWjD,OCejJkM,GAvBmD,SAAC,GAAiB,IAAfnD,EAAc,EAAdA,QAAc,EAEoChI,GAAgB,SAACgI,GAAD,OAC/HC,EAAWD,MADIoD,EAF4D,EAEvExK,UAAqCyK,EAFkC,EAE1CjL,OAA8BkL,EAFY,EAEnBhL,MAAiCiL,EAFd,EAEE/K,WAFF,EAM4CR,GAAgB,SAACgI,GAAD,OACvIG,EAAgBH,MADDwD,EAN4D,EAMvE5K,UAAuC6K,EANgC,EAMxCrL,OAAgCsL,EANQ,EAMfpL,MAAmCqL,EANpB,EAMQnL,WAYvF,OARK+K,QAAsCpL,IAAjBmL,QAAgDnL,IAAlBkL,GACpDD,EAAiBpD,GAGhB2D,QAA0CxL,IAAnBuL,QAAoDvL,IAApBsL,GACxDD,EAAmBxD,QAGD7H,IAAlBkL,QAAmDlL,IAApBsL,EAAwC,8BAEpE,kBAAC,GAAD,CAAa7H,SAAUyH,EAAczH,SAAUqC,UAAWwF,EAAiBhF,mBAAoB,SAACZ,EAAS5G,GAAV,OJmE5E,SAAC+I,EAAiBnC,EAAiB+F,GAC7D,IAAMzC,EAAS/L,EAASgB,YAAY8J,WAAW,aAAanJ,IAAIiJ,GAASE,WAAW,aAAanJ,IAAI8G,GACrG,OAAOzI,EAASgB,YAAYC,gBAAe,SAAAC,GAAW,OAClDA,EAAYa,IAAIgK,GAAQ/J,MAAK,SAAAL,GACzB,IAAMO,EAAOP,EAAIO,OACXkL,EAAWoB,EAAUtM,EAAKuK,MAAQ,EAAI,EACtCgC,EAAatB,EAAcC,GAC3BsB,EAAWxM,EAAKqK,MAAQ,EACxBoC,EAAuBH,EAAUtM,EAAKsK,kBAAoB,EAAItK,EAAKsK,kBACzEtL,EAAY4I,OAAOiC,EAAQ,CAAEU,MAAOW,EAAUhB,IAAKqC,EAAYlC,MAAOmC,EAAUlC,kBAAmBmC,UI5EgB9G,CAAeoG,EAAc1D,KAAM9B,EAAS5G,OCZ5J+M,GANyC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACvD,OACI,kBAAC,GAAD,CAAsBjE,QAASiE,EAAMC,OAAOlE,WCsBrCmE,I,YA5BiC,SAAC,GAAsD,IAApDnE,EAAmD,EAAnDA,QAAmBoE,EAAgC,EAA1CxI,SAAqByI,EAAqB,EAArBA,eAAqB,EAElEnM,mBAASkM,GAFyD,mBAE3FxI,EAF2F,KAEjFgF,EAFiF,OAGxE1I,mBAAS,IAH+D,mBAG3FgB,EAH2F,KAGpFoL,EAHoF,KAUlG,OACI,yBAAKrO,UAAU,gBACX,yBAAKA,UAAU,uBAAf,QAA2C+J,GAC3C,0BAAM/J,UAAU,qBAAqBsO,SARxB,SAAChH,GAClBA,EAAEiH,iBACFH,EAAezI,EAAU1C,EAAM0F,MAAM,UAO7B,2BAAO3I,UAAU,4BAAjB,WAEI,2BAAOA,UAAU,2BAA2BwO,KAAK,SAASC,UAAQ,EAACC,MAAO/I,EAAUgJ,SAAU,SAAArH,GAAC,OAAIqD,GAAarD,EAAEsH,OAAOF,WAE7H,2BAAO1O,UAAU,4BAAjB,YAEI,8BAAUA,UAAU,8BAA8B0O,MAAOzL,EAAO0L,SAAU,SAAArH,GAAC,OAAI+G,EAAS/G,EAAEsH,OAAOF,WAErG,4BAAQF,KAAK,SAASxO,UAAU,6BAAhC,oBCAD6O,GApBmD,SAAC,GAAoC,IAAlC9E,EAAiC,EAAjCA,QAAS+E,EAAwB,EAAxBA,kBAAwB,EAOjD/M,GAAgB,SAACgI,GAAD,OAC7DC,EAAWD,MADPpH,EAP0F,EAO1FA,UAAWR,EAP+E,EAO/EA,OAAQE,EAPuE,EAOvEA,MAQ3B,OAfkG,EAOhEE,iBAILL,IAAVG,QAAkCH,IAAXC,GACtCQ,EAAUoH,QAGC7H,IAAXC,EAA+B,8BAE5B,kBAAC,GAAD,CAAa4H,QAASA,EAASpE,SAAUxD,EAAOwD,SAAUyI,eAf7C,SAACzI,EAAkB1C,GAAnB,OAAuC8H,QAAQC,IAAI,CACnEL,EAAYZ,EAASpE,GACrBiF,EAASb,EAAS9G,KACnB9B,KAAK2N,OCWGC,GAbyC,SAAC,GAAe,IAAbf,EAAY,EAAZA,MAAY,EAEzB/L,oBAAS,GAFgB,mBAE5D+M,EAF4D,KAE7CC,EAF6C,KAInE,OAAID,EAAwB,kBAAC,IAAD,CAAU/O,GAAG,MAGrC,yBAAKD,UAAU,qBACX,kBAAC,GAAD,CAAsB+J,QAASiE,EAAMC,OAAOlE,QAAS+E,kBAAmB,kBAAMG,GAAiB,QCa5FC,I,YA5BqC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAE1ClN,mBAAS,IAFiC,mBAE3DyH,EAF2D,KAErD0F,EAFqD,OAGlCnN,mBAAS,IAHyB,mBAG3D0D,EAH2D,KAGjDgF,EAHiD,KAUlE,OACI,yBAAK3K,UAAU,kBACX,yBAAKA,UAAU,yBAAf,kBACA,0BAAMA,UAAU,uBAAuBsO,SAR1B,SAAChH,GAClBA,EAAEiH,iBACFY,EAASzF,EAAM/D,KAOX,2BAAO3F,UAAU,8BAAjB,OAEQ,2BAAOA,UAAU,6BAA6BwO,KAAK,OAAOC,UAAQ,EAACC,MAAOhF,EAAMiF,SAAU,SAAArH,GAAC,OAAI8H,EAAQ9H,EAAEsH,OAAOF,WAEpH,2BAAO1O,UAAU,8BAAjB,WAEI,2BAAOA,UAAU,6BAA6BwO,KAAK,SAASC,UAAQ,EAACC,MAAO/I,EAAUgJ,SAAU,SAAArH,GAAC,OAAIqD,GAAarD,EAAEsH,OAAOF,WAE/H,4BAAQF,KAAK,SAASxO,UAAU,+BAAhC,oBCVDqP,GAVuD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAKrE,OACI,kBAAC,GAAD,CAAeH,SAJF,SAACzF,EAAc/D,GAAf,OVkDQ,SAAC+D,EAAc/D,GACxC,IAAMuF,EAAS/L,EAASgB,YAAY8J,WAAW,aAAanJ,IAAI4I,GAChE,OAAOvK,EAASgB,YAAYC,gBAAe,SAAAC,GAAW,OAClDA,EAAYa,IAAIgK,GAAQ/J,MAAK,SAAAL,GACpBA,EAAIM,QACLf,EAAYQ,IAAIqK,EAAQ,CAAEvB,KAAM,EAAGhE,SAAUA,EAAU1C,MAAO,WUvDrBsM,CAAc7F,EAAM/D,GACpExE,KAAKmO,OCOCE,GAbqB,WAAO,IAAD,EAEIvN,oBAAS,GAFb,mBAE/B+M,EAF+B,KAEhBC,EAFgB,KAItC,OAAID,EAAwB,kBAAC,IAAD,CAAU/O,GAAG,MAGrC,yBAAKD,UAAU,uBACX,kBAAC,GAAD,CAAwBsP,YAAa,kBAAML,GAAiB,QCYzDQ,I,MAnB6B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAErBzN,oBAAS,GAFY,mBAElDM,EAFkD,KAEtCC,EAFsC,KASzD,OACI,yBAAKxC,UAAU,cACVuC,GAAc,yBAAKvC,UAAU,0BAAf,kBACbuC,GAAcmN,EAAQhP,KAAI,WAAiBgB,GAAjB,IAAEgI,EAAF,EAAEA,KAAMiG,EAAR,EAAQA,OAAR,OACxB,4BAAQ3P,UAAU,qBAAqB2D,IAAKjC,EAAK8F,QAAS,kBAThD,SAACmI,GACnBnN,GAAc,GACdmN,IAASC,SAAQ,kBAAMpN,GAAc,MAOmCqN,CAAcF,KAAUjG,S,2BCDlGoG,GAAgB,kBAClB9F,EAAW,oBAAoB7I,MAAK,SAAA4I,GAChC,IAAMgG,EAAiB,IAAI3D,IAAIrC,EAAQ9G,OACjC+M,EAAaC,GAASzF,QAAO,SAAA0F,GAAE,OAAIA,EAAG9E,MAAK,SAAAtI,GAAI,OAAKiN,EAAeI,IAAIrN,SAAQc,MAAM,EAAG,KAAKwM,SAAQ,SAAAF,GAAE,OAAIA,KACjH,OAAOtF,EAAS,mBAAoBoF,OAGtCK,GAAiB,kBACnBrG,EAAW,0BAA0B7I,MAAK,SAAA4I,GACtC,IAAMgG,EAAiB,IAAI3D,IAAIrC,EAAQ9G,OACjC+M,EAAaM,GAAU9F,QAAO,SAAA0F,GAAE,OAAIA,EAAG9E,MAAK,SAAAtI,GAAI,OAAKiN,EAAeI,IAAIrN,SAAQc,MAAM,EAAG,KAAKwM,SAAQ,SAAAF,GAAE,OAAIA,KAClH,OAAOtF,EAAS,yBAA0BoF,OAG5CO,GAAe,kBACjBvG,EAAW,YAAY7I,MAAK,SAAA4I,GACxB,IAAMgG,EAAiB,IAAI3D,IAAIrC,EAAQ9G,OACjC+M,EAAaQ,GAAWhG,QAAO,SAAA0F,GAAE,OAAIA,EAAG9E,MAAK,SAAAtI,GAAI,OAAKiN,EAAeI,IAAIrN,SAAQc,MAAM,EAAG,KAAKwM,SAAQ,SAAAF,GAAE,OAAIA,KACnH,OAAOtF,EAAS,WAAYoF,OAGrBS,GAhCsB,WAEjC,IAAMf,EAAU,CACZ,CAAChG,KAAM,0BAA2BiG,OAAQG,IAC1C,CAACpG,KAAM,gCAAiCiG,OAAQU,IAChD,CAAC3G,KAAM,kBAAmBiG,OAAQY,KAGtC,OAAO,kBAAC,GAAD,CAAWb,QAASA,KCNhBgB,GANiB,WAC5B,OACI,kBAAC,GAAD,OCyBOC,I,YAvBqB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAErB3O,mBAAS,IAFY,mBAExCtC,EAFwC,KAEjCkR,EAFiC,OAGf5O,mBAAS,IAHM,mBAGxCrC,EAHwC,KAG9BkR,EAH8B,OAIX7O,oBAAS,GAJE,mBAIxC8O,EAJwC,KAI5BC,EAJ4B,KAM/C,OAAID,EACO,kBAAC,IAAD,CAAU9Q,GAAG,MAGjB,yBAAKD,UAAU,SAClB,2BAAOA,UAAU,gBAAjB,QAEI,2BAAOwO,KAAK,QAAQxO,UAAU,eAAe0O,MAAO/O,EAAOgP,SAAU,SAAArH,GAAC,OAAIuJ,EAASvJ,EAAEsH,OAAOF,WAEhG,2BAAO1O,UAAU,gBAAjB,WAEI,2BAAOwO,KAAK,WAAWxO,UAAU,eAAe0O,MAAO9O,EAAU+O,SAAU,SAAArH,GAAC,OAAIwJ,EAAYxJ,EAAEsH,OAAOF,WAEzG,4BAAQ1O,UAAU,gBAAgBwH,QAAS,kBAAMoJ,EAAQjR,EAAOC,GAAUuB,MAAK,kBAAM6P,GAAc,QAAnG,aClBOC,GAJkB,WAC7B,OAAO,kBAAC,GAAD,CAAOL,QAASlR,KCIZwR,GANa,WACxB,OAAO,yBAAKlR,UAAU,cAClB,kBAAC,GAAD,QCkBOmR,GAVO,WAClB,OACI,kBAAC,IAAD,CAAQC,SAAS,sBACb,yBAAKpR,UAAU,OACX,kBAACqR,GAAD,SAgCVA,GAASC,aAxBW,WAEtB,IAAMC,IrCvBwBpS,EAASU,OAAO2R,YqCyB9C,OACI,yBAAKxR,UAAU,kBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBACTuR,GAAY,kBAAC,GAAD,MACbA,GACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,KAAK,kBAAkBC,UAAW3D,KACzC,kBAAC,IAAD,CAAO0D,KAAK,iBAAiBC,UAAW3C,KACxC,kBAAC,IAAD,CAAO0C,KAAK,aAAaC,UAAWlI,IACpC,kBAAC,IAAD,CAAOiI,KAAK,UAAUC,UAAWlC,KACjC,kBAAC,IAAD,CAAOiC,KAAK,cAAcC,UAAWhB,KACrC,kBAAC,IAAD,CAAOe,KAAK,IAAIC,UAAW1E,WC9B/B2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2DCZN+D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnR,MAAK,SAAAoR,GACJA,EAAaC,gBAEd5P,OAAM,SAAAP,GACLoQ,QAAQpQ,MAAMA,EAAMqQ,c","file":"static/js/main.88f884c3.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n};\r\n\r\nexport default firebase.initializeApp(config);\r\n","import firebase from './firebase';\r\n\r\nexport const login = (email: string, password: string) =>\r\n    firebase.auth().signInWithEmailAndPassword(email, password);\r\n\r\nexport const isLoggedIn = () => !!firebase.auth().currentUser;\r\n","import React from 'react';\r\nimport './Navbar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <Link className=\"navbar__link\" to=\"/\">Home</Link>\r\n            <Link className=\"navbar__link\" to=\"/ascension\">Ascension</Link>\r\n            <Link className=\"navbar__link\" to=\"/quick-edit\">Quick Edit</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import firebase from './firebase';\r\nimport fb from 'firebase/app';\r\n\r\nimport conundrums from '../data/single_cons.json';\r\n\r\nexport interface Ascension {\r\n    waiting: string[];\r\n    solved: string[];\r\n    unsolved: string[];\r\n}\r\n\r\nexport const getAscension = (): Promise<Ascension> => {\r\n\r\n    return firebase.firestore().runTransaction(transaction => {\r\n\r\n        const startNewCycle = () => {\r\n            const waitingConundrums = shuffle(conundrums.map(c => c.join(',')));\r\n            transaction.set(firebase.firestore().doc('ascension/ascension'), {\r\n                waiting: waitingConundrums,\r\n                solved: [],\r\n                unsolved: []\r\n            });\r\n        };\r\n\r\n        const continueCurrentCycle = (ascension: Ascension) => {\r\n            transaction.set(firebase.firestore().doc('ascension/ascension'), {\r\n                waiting: ascension.unsolved,\r\n                solved: ascension.solved,\r\n                unsolved: []\r\n            });\r\n        }\r\n\r\n        return transaction.get(firebase.firestore().doc('ascension/ascension')).then(doc => {\r\n            if (!doc.exists) {\r\n                startNewCycle();\r\n            } else {\r\n                const data = doc.data() as Ascension;\r\n                if (data.waiting.length === 0) {\r\n                    if (data.unsolved.length > 0) {\r\n                        continueCurrentCycle(data);\r\n                    } else {\r\n                        startNewCycle();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    })\r\n    .then(() => firebase.firestore().doc('ascension/ascension').get())\r\n    .then(doc => doc.data() as Ascension)\r\n}\r\n\r\nexport const recordConundrumAsSolved = (conundrum: string): Promise<void> => {\r\n    return firebase.firestore().doc('ascension/ascension').update({\r\n        waiting: fb.firestore.FieldValue.arrayRemove(conundrum),\r\n        solved: fb.firestore.FieldValue.arrayUnion(conundrum)\r\n    });\r\n}\r\n\r\nexport const recordConundrumAsUnsolved = (conundrum: string): Promise<void> => {\r\n    return firebase.firestore().doc('ascension/ascension').update({\r\n        waiting: fb.firestore.FieldValue.arrayRemove(conundrum),\r\n        unsolved: fb.firestore.FieldValue.arrayUnion(conundrum)\r\n    });\r\n}\r\n\r\nconst shuffle = <T extends any>(items: T[]): T[] => {\r\n    const arr = [...items];\r\n    for (let idx = arr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [arr[idx], arr[jdx]] = [arr[jdx], arr[idx]];\r\n    }\r\n    return arr;\r\n}\r\n","import { useState } from 'react';\r\n\r\nexport type AsyncRequest<T, R, E> = {\r\n    doRequest: (data: T) => Promise<void>,\r\n    result: R | undefined,\r\n    error: E | boolean | undefined,\r\n    inProgress: boolean,\r\n    isComplete: boolean,\r\n};\r\n\r\nconst useAsyncRequest = <T, R, E> (request: (data: T) => Promise<R>): AsyncRequest<T, R, E> => {\r\n\r\n    const [result, setResult] = useState<R | undefined>(undefined);\r\n    const [error, setError] = useState<E | boolean | undefined>(undefined);\r\n    const [inProgress, setInProgress] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n\r\n    const doRequest = (data: T) => {\r\n        setInProgress(true); setIsComplete(false); setResult(undefined); setError(undefined);\r\n        return request(data)\r\n            .then(result => {\r\n                setResult(result);\r\n                setInProgress(false);\r\n                setIsComplete(true);\r\n            })\r\n            .catch((error: E) => {\r\n                setError(error === undefined ? true : error);\r\n                setInProgress(false);\r\n            });\r\n    };\r\n\r\n    return { doRequest, result, error, inProgress, isComplete }\r\n}\r\n\r\nexport default useAsyncRequest;\r\n","import aptodict from '../data/aptodict.json';\r\n\r\nexport const isInDictionary = (word: string): boolean =>\r\n    indexInDictionary(word) !== -1;\r\n\r\nexport const suffixes = (word: string): string[] =>\r\n    wordsBeginningWith(word).slice(1).map(w => w.slice(word.length))\r\n\r\nconst wordsBeginningWith = (word: string): string[] => {\r\n    let index = indexInDictionary(word);\r\n    if (index === -1) { return []; }\r\n\r\n    const words = [];\r\n    while (aptodict[index].startsWith(word)) {\r\n        words.push(aptodict[index]);\r\n        if (++index === aptodict.length) break;\r\n    }\r\n\r\n    return words;\r\n}\r\n\r\nconst indexInDictionary = (word: string): number => {\r\n    let lo = 0;\r\n    let hi = aptodict.length - 1;\r\n\r\n    while (lo !== hi) {\r\n        let mid = Math.floor((lo + hi - 1) / 2);\r\n        if (aptodict[mid] === word) { return mid; }\r\n        else if (aptodict[mid] > word) { hi = mid; }\r\n        else { lo = mid + 1; }\r\n    }\r\n\r\n    return aptodict[lo] === word ? lo : -1;\r\n}","import React from 'react';\r\nimport { suffixes } from '../../services/dictionaryService';\r\nimport './Answers.css';\r\n\r\nexport interface AnswersProps {\r\n    answers: string[];\r\n}\r\n\r\nconst Answers: React.FC<AnswersProps> = ({ answers }) => {\r\n    return (\r\n        <div className=\"answers\">\r\n            <ul className=\"answers__list\">\r\n                {answers.map((ans, idx) =>\r\n                    <li key={idx} className=\"answers__answer\">{ans} ({suffixes(ans).join('/')})</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Answers;\r\n","import React from 'react';\r\nimport './LetterCard.css';\r\n\r\nexport interface LetterCardProps {\r\n    letter: string;\r\n}\r\n\r\nconst LetterCard: React.FC<LetterCardProps> = ({ letter }) => {\r\n    return (\r\n        <div className=\"letter-card\">{letter}</div>\r\n    );\r\n};\r\n\r\nexport default LetterCard;\r\n","import React from 'react';\r\nimport './Scramble.css';\r\n\r\nimport LetterCard from '../LetterCard/LetterCard';\r\n\r\nexport interface ScrambleProps {\r\n    scramble: string;\r\n}\r\n\r\nconst Scramble: React.FC<ScrambleProps> = ({ scramble }) => {\r\n    return (\r\n        <div className=\"scramble\">\r\n            {[...scramble].map((char, idx) =>\r\n                <LetterCard key={idx} letter={char}></LetterCard>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scramble;\r\n","import { useState } from 'react';\r\nimport { Emitter } from './useEventEmitter';\r\n\r\nimport useInterval from './useInterval';\r\n\r\nexport default function useTimer(seconds: number, emitter: Emitter<void>) {\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState(seconds);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    useInterval(() => {\r\n        if (timeRemaining > 0) {\r\n            setTimeRemaining(time => Math.max(0, time - 0.03));\r\n        } else {\r\n            setIsRunning(false);\r\n            emitter.emit('expire');\r\n        }\r\n    }, isRunning ? 30 : null);\r\n\r\n    const startTimer = () => {\r\n        setTimeRemaining(seconds);\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    return { startTimer, stopTimer, timeRemaining };\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function useInterval(callback: () => void, delay: number | null) {\r\n\r\n    const savedCallback = useRef<() => void>();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (delay !== null) {\r\n            let id = setInterval(() => savedCallback.current && savedCallback.current(), delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nimport useTimer from '../../hooks/useTimer';\r\nimport { Emitter } from '../../hooks/useEventEmitter';\r\n\r\nexport interface TimerProps {\r\n    seconds: number;\r\n    eventEmitter: Emitter<void>;\r\n}\r\n\r\nconst Timer: React.FC<TimerProps> = ({ seconds, eventEmitter }) => {\r\n\r\n    const { startTimer, stopTimer, timeRemaining } = useTimer(seconds, eventEmitter);\r\n    useEffect(() => eventEmitter.on('start', () => startTimer()), []);\r\n    useEffect(() => eventEmitter.on('stop', () => stopTimer()), []);\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <div className=\"timer__progress\" style={progressBarStyle(timeRemaining, seconds)}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst progressBarStyle = (remaining: number, duration: number) => ({\r\n    width: `${100 * remaining / duration}%`\r\n});\r\n\r\nexport default Timer;\r\n","import { useState } from 'react';\r\n\r\nexport class Emitter<T> {\r\n\r\n    private callbacks: {[s: string]: ((_: T) => void)[]} = {};\r\n\r\n    public emit(event: string, data: T): void {\r\n        this.callbacks[event] && this.callbacks[event].forEach(cb => cb(data));\r\n    }\r\n\r\n    public on(event: string, cb: (_: T) => void) {\r\n        if (!this.callbacks[event]) this.callbacks[event] = [];\r\n        this.callbacks[event].push(cb);\r\n    }\r\n}\r\n\r\nexport default function useEventEmitter<T>() {\r\n    const eventEmitter = useState(new Emitter<T>())[0];\r\n    return eventEmitter;\r\n}\r\n","import React, { useEffect, useState, useRef, KeyboardEvent } from 'react';\r\nimport './Question.css';\r\n\r\nimport Answers from '../Answers/Answers';\r\nimport Scramble from '../Scramble/Scramble';\r\nimport Timer from '../Timer/Timer';\r\n\r\nimport useEventEmitter from '../../hooks/useEventEmitter';\r\n\r\nexport interface QuestionProps {\r\n    idx: number;\r\n    scramble: string;\r\n    answers: string[];\r\n    duration: number;\r\n    onQuestionEnded: (solved: boolean) => void;\r\n}\r\n\r\nconst Question: React.FC<QuestionProps> = ({ idx, scramble, answers, duration, onQuestionEnded }) => {\r\n\r\n    const [questionActive, setQuestionActive] = useState(true);\r\n    const [solved, setSolved] = useState(true);\r\n    const timerEmitter = useEventEmitter<void>();\r\n\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        containerRef.current && containerRef.current.focus();\r\n    });\r\n\r\n    useEffect(() => startQuestion(), [idx]);\r\n    useEffect(() => timerEmitter.on('expire', () => answerQuestion(false)), []);\r\n\r\n    const startQuestion = () => {\r\n        setQuestionActive(true);\r\n        timerEmitter.emit('start');\r\n    };\r\n\r\n    const answerQuestion = (response: boolean) => {\r\n        setQuestionActive(false);\r\n        setSolved(response);\r\n        timerEmitter.emit('stop');\r\n    };\r\n\r\n    const endQuestion = () => {\r\n        setQuestionActive(true);\r\n        onQuestionEnded(solved);\r\n    }\r\n\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n        if (questionActive && e.key.toUpperCase() === ' ') answerQuestion(true);\r\n        else if (questionActive && e.key.toUpperCase() === 'M') answerQuestion(false);\r\n        else if (!questionActive && e.key.toUpperCase() === 'M') setSolved(!solved);\r\n        else if (!questionActive && e.key.toUpperCase() === ' ') endQuestion();\r\n    };\r\n\r\n    return (\r\n        <div className=\"question\" ref={containerRef} tabIndex={-1} onKeyPress={handleKeyPress}>\r\n            <div className=\"question__scramble-and-timer\">\r\n                <Scramble scramble={scramble}></Scramble>\r\n                <Timer seconds={duration} eventEmitter={timerEmitter}></Timer>\r\n            </div>\r\n            {questionActive && <div className=\"question__response\">\r\n                <button className=\"question__response-button question__response-button--solved\" onClick={() => answerQuestion(true)}>Solved</button>\r\n                <button className=\"question__response-button question__response-button--missed\" onClick={() => answerQuestion(false)}>Missed</button>\r\n            </div>}\r\n            {!questionActive && <div className=\"question__results\">\r\n                <Answers answers={answers}></Answers>\r\n                <div className=\"question__confirm\">\r\n                    <button className={'question__response-button question__response-button--' + (solved ? 'solved' : 'missed')} onClick={() => setSolved(!solved)}>{solved ? 'Solved' : 'Missed'}</button>\r\n                    <button className=\"question__response-button\" onClick={() => endQuestion()}>Next question</button>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n","import React, { useState } from 'react';\r\nimport './Quiz.css';\r\n\r\nimport Question from '../Question/Question';\r\n\r\nexport interface QuizQuestion {\r\n    scramble: string;\r\n    answers: string[];\r\n}\r\n\r\nexport interface QuizProps {\r\n    questions: QuizQuestion[];\r\n    duration: number;\r\n    recycle: boolean;\r\n    onQuestionEnded: (scramble: string, solved: boolean) => void;\r\n}\r\n\r\nconst Quiz: React.FC<QuizProps> = ({ questions: _questions, duration, recycle, onQuestionEnded }) => {\r\n\r\n    const [questions, setQuestions] = useState(_questions);\r\n    const [questionIdx, setQuestionIdx] = useState(0);\r\n\r\n    const endQuestion = (solved: boolean) => {\r\n        onQuestionEnded(questions[questionIdx].scramble, solved);\r\n        if (!solved && recycle) setQuestions([...questions, newScramble(questions[questionIdx])]);\r\n        setQuestionIdx(idx => idx + 1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz\">\r\n            {questionIdx >= questions.length && <div className=\"quiz__ended\">\r\n                No more questions!\r\n            </div>}\r\n            {questionIdx < questions.length && <div className=\"quiz__question\">\r\n                <div className=\"quiz__heading\">Question {questionIdx + 1} of {questions.length}</div>\r\n                <Question idx={questionIdx} scramble={questions[questionIdx].scramble} answers={questions[questionIdx].answers} duration={duration} onQuestionEnded={endQuestion}></Question>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst newScramble = (question: QuizQuestion) => ({\r\n    ...question,\r\n    scramble: randomScramble(question.scramble)\r\n});\r\n\r\nconst randomScramble = (letters: string) => {\r\n    const lettersArr = [...letters];\r\n    for (let idx = lettersArr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [lettersArr[idx], lettersArr[jdx]] = [lettersArr[jdx], lettersArr[idx]];\r\n    }\r\n    return lettersArr.join('');\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\n\r\nimport conundrums from '../../data/single_cons.json';\r\n\r\nimport Quiz from '../Quiz/Quiz';\r\nimport { Ascension } from '../../services/ascensionService';\r\n\r\nexport interface AscensionQuizProps {\r\n    ascension: Ascension;\r\n    duration: number;\r\n    onQuestionAnswered: (conundrum: string, solved: boolean) => void;\r\n}\r\n\r\nconst AscensionQuiz: React.FC<AscensionQuizProps> = ({ ascension, duration, onQuestionAnswered }) => {\r\n\r\n    const quizQuestions = shuffle(ascension.waiting.map(con => ({\r\n        scramble: randomScramble(con.split(',')[0]),\r\n        answers: con.split(',')\r\n    })));\r\n\r\n    const lookupMap = Object.assign({}, ...conundrums.map(con => ({ [keyFromScramble(con[0])]: con.join(',') })));\r\n\r\n    return (\r\n        <Quiz questions={quizQuestions} duration={duration} recycle={false} onQuestionEnded={(scramble, solved) => onQuestionAnswered(lookupMap[keyFromScramble(scramble)], solved)}></Quiz>\r\n    );\r\n};\r\n\r\nconst shuffle = <T extends any>(items: T[]): T[] => {\r\n    const arr = [...items];\r\n    for (let idx = arr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [arr[idx], arr[jdx]] = [arr[jdx], arr[idx]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst randomScramble = (letters: string) => {\r\n    return shuffle([...letters]).join('');\r\n};\r\n\r\nconst keyFromScramble = (scramble: string) => [...scramble].sort().join('');\r\n\r\nexport default AscensionQuiz;\r\n","import React from 'react';\r\n\r\nimport { getAscension, recordConundrumAsSolved, recordConundrumAsUnsolved } from '../../services/ascensionService';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\n\r\nimport AscensionQuiz from '../../components/AscensionQuiz/AscensionQuiz';\r\n\r\nconst NetworkedAscensionQuiz: React.FC = () => {\r\n\r\n    const { doRequest, result, error, inProgress } = useAsyncRequest(() =>\r\n        getAscension()\r\n    );\r\n\r\n    if (!inProgress && error === undefined && result === undefined) {\r\n        doRequest(1);\r\n    }\r\n\r\n    if (result === undefined) { return <div></div>; }\r\n\r\n    const answerQuestion = (conundrum: string, solved: boolean) => {\r\n        if (solved) recordConundrumAsSolved(conundrum);\r\n        else recordConundrumAsUnsolved(conundrum);\r\n    }\r\n\r\n    return (\r\n        <AscensionQuiz duration={5} ascension={result} onQuestionAnswered={answerQuestion}></AscensionQuiz>\r\n    );\r\n};\r\n\r\nexport default NetworkedAscensionQuiz;\r\n","import React from 'react';\r\n\r\nimport NetworkedAscensionQuiz from '../../containers/NetworkedAscensionQuiz/NetworkedAscensionQuiz';\r\n\r\nconst AscensionQuizPage: React.FC = () => {\r\n    return (\r\n        <NetworkedAscensionQuiz></NetworkedAscensionQuiz>\r\n    );\r\n};\r\n\r\nexport default AscensionQuizPage;\r\n","import React from 'react';\r\nimport './CardboxSummary.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface CardboxSummaryProps {\r\n    name: string;\r\n    size: number;\r\n    hasQuestionsDue: boolean;\r\n}\r\n\r\nconst CardboxSummary: React.FC<CardboxSummaryProps> = ({ name, size, hasQuestionsDue }) => {\r\n    return (\r\n        <div className=\"cardbox-summary\">\r\n            <div className=\"cardbox-summary__name\">{name} ({size})</div>\r\n            <div className={'cardbox-summary__status cardbox-summary__status--' + (hasQuestionsDue ? 'due' : 'stale')}>{hasQuestionsDue ? 'Questions Due' : 'No Questions Due'}</div>\r\n            <div className=\"cardbox-summary__actions\">\r\n                <Link className=\"cardbox-summary__action\" to={`/edit/${name}`}>Edit</Link>\r\n                <Link className=\"cardbox-summary__action\" to={`/learn/${name}`}>Learn</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardboxSummary;\r\n","import React from 'react';\r\nimport './CardboxList.css';\r\n\r\nimport CardboxSummary from '../CardboxSummary/CardboxSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface CardboxListProps {\r\n    cardboxes: {name: string, size: number, hasQuestionsDue: boolean}[];\r\n}\r\n\r\nconst CardboxList: React.FC<CardboxListProps> = ({ cardboxes }) => {\r\n    return (\r\n        <div className=\"cardbox-list\">\r\n            {cardboxes.map((cardbox, idx) =>\r\n                <CardboxSummary {...cardbox} key={idx}></CardboxSummary>\r\n            )}\r\n            <Link to=\"/create\" className=\"cardbox-list__fake-summary\">\r\n                <div className=\"cardbox-list__plus-line--vertical\"></div>\r\n                <div className=\"cardbox-list__plus-line--horizontal\"></div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardboxList;\r\n","import firebase from './firebase';\r\nimport fb from 'firebase/app';\r\nimport { isInDictionary } from './dictionaryService';\r\n\r\nexport interface Cardbox {\r\n    name: string;\r\n    size: number;\r\n    duration: number;\r\n    words: string[];\r\n}\r\n\r\nexport interface Question {\r\n    letters: string;\r\n    answers: string[];\r\n    asked: number;\r\n    answeredCorrectly: number;\r\n    level: number;\r\n    due: Date;\r\n}\r\n\r\nexport const getCardbox = (cardbox: string): Promise<Cardbox> => \r\n    firebase.firestore().collection('cardboxes').doc(cardbox).get().then(doc => ({\r\n        ...doc.data(),\r\n        name: doc.id\r\n    } as Cardbox));\r\n\r\nexport const getCardboxes = (): Promise<Cardbox[]> =>\r\n    firebase.firestore().collection('cardboxes').get().then(querySnapshot =>\r\n        querySnapshot.docs.map(doc => ({\r\n            ...doc.data(),\r\n            name: doc.id\r\n        } as Cardbox))\r\n    );\r\n\r\nexport const hasQuestionsDue = (cardbox: string): Promise<boolean> =>\r\n    firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions')\r\n        .where('due', '<=', getDueTimestamp()).limit(1).get().then(querySnapshot =>\r\n            !querySnapshot.empty\r\n        );\r\n\r\nexport const getDueQuestions = (cardbox: string): Promise<Question[]> =>\r\n    firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions')\r\n        .where('due', '<=', getDueTimestamp()).get().then(querySnapshot => {\r\n            const cardboxRef = firebase.firestore().collection('cardboxes').doc(cardbox);\r\n            let questions: Question[] = [];\r\n            querySnapshot.docs.forEach(doc => {\r\n                const question = {...doc.data(), letters: doc.id} as Question;\r\n                question.answers = question.answers.filter(ans => {\r\n                    if (isInDictionary(ans)) { return true; }\r\n                    else { cardboxRef.update({ words: fb.firestore.FieldValue.arrayRemove(ans) }); return false; }\r\n                });\r\n                if (question.answers.length === 0) { \r\n                    doc.ref.delete().then(() => cardboxRef.update({ size: fb.firestore.FieldValue.increment(-1) })); \r\n                }\r\n                else { \r\n                    questions.push(question); \r\n                }\r\n            });\r\n            return questions;\r\n        });\r\n\r\nexport const createCardbox = (name: string, duration: number): Promise<void> => {\r\n    const docRef = firebase.firestore().collection('cardboxes').doc(name);\r\n    return firebase.firestore().runTransaction(transaction =>\r\n        transaction.get(docRef).then(doc => {\r\n            if (!doc.exists) {\r\n                transaction.set(docRef, { size: 0, duration: duration, words: [] });\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nexport const setDuration = (cardbox: string, duration: number): Promise<void> => {\r\n    return firebase.firestore().collection('cardboxes').doc(cardbox).update({ duration: duration });\r\n}\r\n\r\nexport const addWords = (cardbox: string, words: string[]): Promise<void[]> => {\r\n    const wordsByKey = groupWordsByKey(words);\r\n    return Promise.all(Object.keys(wordsByKey).map(key =>\r\n        firebase.firestore().runTransaction(transaction => {\r\n            const cardboxRef = firebase.firestore().collection('cardboxes').doc(cardbox);\r\n            const docRef = firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions').doc(key);\r\n            return transaction.get(docRef).then(doc => {\r\n                if (!doc.exists) {\r\n                    transaction.update(cardboxRef, { size: fb.firestore.FieldValue.increment(1), words: fb.firestore.FieldValue.arrayUnion(...wordsByKey[key])});\r\n                    transaction.set(docRef, { answers: wordsByKey[key], asked: 0, answeredCorrectly: 0, level: 0, due: fb.firestore.Timestamp.now() });\r\n                } else {\r\n                    const existingAnswers = (doc.data() as Question).answers;\r\n                    if (wordsByKey[key].some(ans => !existingAnswers.includes(ans))) {\r\n                        transaction.update(cardboxRef, { words: fb.firestore.FieldValue.arrayUnion(wordsByKey[key])});\r\n                        transaction.update(docRef, { answers: dedup([...existingAnswers, ...wordsByKey[key]]), due: fb.firestore.Timestamp.now() });\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    ));\r\n}\r\n\r\nexport const answerQuestion = (cardbox: string, letters: string, correct: boolean) => {\r\n    const docRef = firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions').doc(letters);\r\n    return firebase.firestore().runTransaction(transaction =>\r\n        transaction.get(docRef).then(doc => {\r\n            const data = doc.data() as Question;\r\n            const newLevel = correct ? data.level + 1 : 0;\r\n            const newDueDate = getNewDueDate(newLevel);\r\n            const newAsked = data.asked + 1;\r\n            const newAnsweredCorrectly = correct ? data.answeredCorrectly + 1 : data.answeredCorrectly;\r\n            transaction.update(docRef, { level: newLevel, due: newDueDate, asked: newAsked, answeredCorrectly: newAnsweredCorrectly });\r\n        })\r\n    );\r\n}\r\n\r\nconst getDueTimestamp = () => {\r\n    const dueDate = new Date();\r\n    if (dueDate.getHours() >= 5) dueDate.setDate(dueDate.getDate() + 1); \r\n    dueDate.setHours(5, 0, 0, 0);\r\n    return fb.firestore.Timestamp.fromDate(dueDate);\r\n};\r\n\r\nconst dedup = (words: string[]): string[] => [...new Set(words)].sort();\r\n\r\nconst groupWordsByKey = (words: string[]): {[key: string]: string[]} => {\r\n    const groups: {[key: string]: string[]} = {};\r\n    words.forEach(word => {\r\n        const key = [...word].sort().join('');\r\n        if (groups[key] === undefined) groups[key] = [];\r\n        groups[key].push(word);\r\n    });\r\n    return groups;\r\n}\r\n\r\nconst getNewDueDate = (newLevel: number) => {\r\n    const timeNow = fb.firestore.Timestamp.now();\r\n    const secondsInDay = 60 * 60 * 24;\r\n    const daysToAdd = newLevel === 0 ? 0 : Math.pow(2, Math.min(newLevel, 9) - 1);\r\n    return new fb.firestore.Timestamp(timeNow.seconds + secondsInDay * daysToAdd, timeNow.nanoseconds);\r\n}\r\n","import React from 'react';\r\n\r\nimport CardboxList, { CardboxListProps } from '../../components/CardboxList/CardboxList';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\nimport { getCardboxes, hasQuestionsDue } from '../../services/cardboxService';\r\n\r\nconst NetworkedCardboxList: React.FC = () => {\r\n\r\n    const { doRequest, result, error, inProgress } = useAsyncRequest<void, CardboxListProps['cardboxes'], undefined>(() =>\r\n        getCardboxes().then(cardboxes => Promise.all(cardboxes.map(cardbox =>\r\n            hasQuestionsDue(cardbox.name).then(due => ({ name: cardbox.name, size: cardbox.size, hasQuestionsDue: due}))\r\n        )))\r\n    );\r\n\r\n    if (!inProgress && error === undefined && result === undefined) {\r\n        doRequest();\r\n    }\r\n\r\n    if (result === undefined) { return <div></div>; }\r\n\r\n    return <CardboxList cardboxes={result}></CardboxList>\r\n}\r\n\r\nexport default NetworkedCardboxList;\r\n","import React from 'react';\r\n\r\nimport NetworkedCardboxList from '../../containers/NetworkedCardboxList/NetworkedCardboxList';\r\n\r\nconst CardboxListPage: React.FC = () => {\r\n    return (\r\n        <NetworkedCardboxList></NetworkedCardboxList>\r\n    );\r\n};\r\n\r\nexport default CardboxListPage;\r\n","import React from 'react';\r\n\r\nimport { Question } from '../../services/cardboxService';\r\nimport Quiz from '../Quiz/Quiz';\r\n\r\nexport interface CardboxQuizProps {\r\n    questions: Question[];\r\n    duration: number;\r\n    onQuestionAnswered: (letters: string, solved: boolean) => void;\r\n}\r\n\r\nconst CardboxQuiz: React.FC<CardboxQuizProps> = ({ questions, duration, onQuestionAnswered }) => {\r\n\r\n    const quizQuestions = shuffle(questions.map(question => ({\r\n        scramble: randomScramble(question.letters),\r\n        answers: question.answers\r\n    })));\r\n\r\n    return (\r\n        <Quiz questions={quizQuestions} duration={duration} recycle={true} onQuestionEnded={(scramble, solved) => onQuestionAnswered(keyFromScramble(scramble), solved)}></Quiz>\r\n    );\r\n};\r\n\r\nconst shuffle = <T extends any>(items: T[]): T[] => {\r\n    const arr = [...items];\r\n    for (let idx = arr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [arr[idx], arr[jdx]] = [arr[jdx], arr[idx]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst randomScramble = (letters: string) => {\r\n    return shuffle([...letters]).join('');\r\n};\r\n\r\nconst keyFromScramble = (scramble: string) => [...scramble].sort().join('');\r\n\r\nexport default CardboxQuiz;\r\n","import React from 'react';\r\n\r\nimport { getDueQuestions, getCardbox, answerQuestion } from '../../services/cardboxService';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\n\r\nimport CardboxQuiz from '../../components/CardboxQuiz/CardboxQuiz';\r\n\r\nexport interface NetworkedCardboxQuizProps {\r\n    cardbox: string;\r\n}\r\n\r\nconst NetworkedCardboxQuiz: React.FC<NetworkedCardboxQuizProps> = ({ cardbox }) => {\r\n\r\n    const { doRequest: doCardboxRequest, result: cardboxResult, error: cardboxError, inProgress: cardboxInProgress } = useAsyncRequest((cardbox: string) =>\r\n        getCardbox(cardbox)\r\n    )\r\n\r\n    const { doRequest: doQuestionsRequest, result: questionsResult, error: questionsError, inProgress: questionsInProgress } = useAsyncRequest((cardbox: string) =>\r\n        getDueQuestions(cardbox)\r\n    );\r\n\r\n    if (!cardboxInProgress && cardboxError === undefined && cardboxResult === undefined) {\r\n        doCardboxRequest(cardbox);\r\n    }\r\n\r\n    if (!questionsInProgress && questionsError === undefined && questionsResult === undefined) {\r\n        doQuestionsRequest(cardbox);\r\n    }\r\n\r\n    if (cardboxResult === undefined || questionsResult === undefined) { return <div></div>; }\r\n\r\n    return <CardboxQuiz duration={cardboxResult.duration} questions={questionsResult} onQuestionAnswered={(letters, solved) => answerQuestion(cardboxResult.name, letters, solved)}></CardboxQuiz>;\r\n};\r\n\r\nexport default NetworkedCardboxQuiz;\r\n","import React from 'react';\r\n\r\nimport { match } from 'react-router-dom';\r\nimport NetworkedCardboxQuiz from '../../containers/NetworkedCardboxQuiz/NetworkedCardboxQuiz';\r\n\r\nexport interface CardboxQuizPageParams {\r\n    cardbox: string;\r\n}\r\n\r\nexport interface CardboxQuizPageProps {\r\n    match: match<CardboxQuizPageParams>;\r\n}\r\n\r\nconst CardboxQuizPage: React.FC<CardboxQuizPageProps> = ({ match }) => {\r\n    return (\r\n        <NetworkedCardboxQuiz cardbox={match.params.cardbox}></NetworkedCardboxQuiz>\r\n    );\r\n};\r\n\r\nexport default CardboxQuizPage;\r\n","import React, { useState, FormEvent } from 'react';\r\nimport './EditCardbox.css';\r\n\r\nexport interface EditCardboxProps {\r\n    cardbox: string;\r\n    duration: number;\r\n    onChangesSaved: (duration: number, words: string[]) => void;\r\n}\r\n\r\nconst EditCardbox: React.FC<EditCardboxProps> = ({ cardbox, duration: _duration, onChangesSaved }) => {\r\n\r\n    const [duration, setDuration] = useState(_duration);\r\n    const [words, setWords] = useState('');\r\n\r\n    const handleSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        onChangesSaved(duration, words.split(/\\s+/));\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-cardbox\">\r\n            <div className=\"edit-cardbox__title\">Edit {cardbox}</div>\r\n            <form className=\"edit-cardbox__form\" onSubmit={handleSubmit}>\r\n                <label className=\"edit-cardbox__form-field\">\r\n                    Duration\r\n                    <input className=\"edit-cardbox__form-input\" type=\"number\" required value={duration} onChange={e => setDuration(+e.target.value)}></input>\r\n                </label>\r\n                <label className=\"edit-cardbox__form-field\">\r\n                    Add words\r\n                    <textarea className=\"edit-cardbox__form-textarea\" value={words} onChange={e => setWords(e.target.value)}></textarea>\r\n                </label>\r\n                <button type=\"submit\" className=\"edit-cardbox__form-button\">Save Changes</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditCardbox;\r\n","import React from 'react';\r\n\r\nimport EditCardbox from '../../components/EditCardbox/EditCardbox';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\nimport { getCardbox, setDuration, addWords,  } from '../../services/cardboxService';\r\n\r\nexport interface NetworkedEditCardboxProps {\r\n    cardbox: string;\r\n    afterChangesSaved: () => void;\r\n}\r\n\r\nconst NetworkedEditCardbox: React.FC<NetworkedEditCardboxProps> = ({ cardbox, afterChangesSaved }) => {\r\n\r\n    const saveChanges = (duration: number, words: string[]) => Promise.all([\r\n        setDuration(cardbox, duration),\r\n        addWords(cardbox, words)\r\n    ]).then(afterChangesSaved);\r\n\r\n    const { doRequest, result, error, inProgress } = useAsyncRequest((cardbox: string) =>\r\n        getCardbox(cardbox)\r\n    );\r\n\r\n    if (!inProgress && error === undefined && result === undefined) {\r\n        doRequest(cardbox);\r\n    }\r\n\r\n    if (result === undefined) { return <div></div>; }\r\n\r\n    return <EditCardbox cardbox={cardbox} duration={result.duration} onChangesSaved={saveChanges}></EditCardbox>\r\n};\r\n\r\nexport default NetworkedEditCardbox;\r\n","import React, { useState } from 'react';\r\nimport './EditCardboxPage.css';\r\n\r\nimport { match, Redirect } from 'react-router-dom';\r\nimport NetworkedEditCardbox from '../../containers/NetworkedEditCardbox/NetworkedEditCardbox';\r\n\r\nexport interface EditCardboxPageParams {\r\n    cardbox: string;\r\n}\r\n\r\nexport interface EditCardboxPageProps {\r\n    match: match<EditCardboxPageParams>;\r\n}\r\n\r\nconst EditCardboxPage: React.FC<EditCardboxPageProps> = ({ match }) => {\r\n\r\n    const [isRedirecting, setIsRedirecting] = useState(false);\r\n\r\n    if (isRedirecting) { return <Redirect to='/'></Redirect>; }\r\n\r\n    return (\r\n        <div className=\"edit-cardbox-page\">\r\n            <NetworkedEditCardbox cardbox={match.params.cardbox} afterChangesSaved={() => setIsRedirecting(true)}></NetworkedEditCardbox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditCardboxPage;\r\n","import React, { useState, FormEvent } from 'react';\r\nimport './CreateCardbox.css';\r\n\r\nexport interface CreateCardboxProps {\r\n    onCreate: (name: string, duration: number) => void;\r\n}\r\n\r\nconst CreateCardbox: React.FC<CreateCardboxProps> = ({ onCreate }) => {\r\n\r\n    const [name, setName] = useState('')\r\n    const [duration, setDuration] = useState(10);\r\n\r\n    const handleSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        onCreate(name, duration);\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-cardbox\">\r\n            <div className=\"create-cardbox__title\">Create Cardbox</div>\r\n            <form className=\"create-cardbox__form\" onSubmit={handleSubmit}>\r\n            <label className=\"create-cardbox__form-field\">\r\n                    Name\r\n                    <input className=\"create-cardbox__form-input\" type=\"text\" required value={name} onChange={e => setName(e.target.value)}></input>\r\n                </label>\r\n                <label className=\"create-cardbox__form-field\">\r\n                    Duration\r\n                    <input className=\"create-cardbox__form-input\" type=\"number\" required value={duration} onChange={e => setDuration(+e.target.value)}></input>\r\n                </label>\r\n                <button type=\"submit\" className=\"create-cardbox__form-button\">Save Changes</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateCardbox;\r\n","import React from 'react';\r\n\r\nimport CreateCardbox from '../../components/CreateCardbox/CreateCardbox';\r\nimport { createCardbox } from '../../services/cardboxService';\r\n\r\nexport interface NetworkedCreateCardboxProps {\r\n    afterCreate: () => void;\r\n}\r\n\r\nconst NetworkedCreateCardbox: React.FC<NetworkedCreateCardboxProps> = ({ afterCreate }) => {\r\n\r\n    const doCreate = (name: string, duration: number) => createCardbox(name, duration)\r\n        .then(afterCreate);\r\n\r\n    return (\r\n        <CreateCardbox onCreate={doCreate}></CreateCardbox>\r\n    );\r\n};\r\n\r\nexport default NetworkedCreateCardbox;\r\n","import React, { useState } from 'react';\r\nimport './CreateCardboxPage.css';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport NetworkedCreateCardbox from '../../containers/NetworkedCreateCardbox/NetworkedCreateCardbox';\r\n\r\nconst CreateCardboxPage: React.FC = () => {\r\n\r\n    const [isRedirecting, setIsRedirecting] = useState(false);\r\n\r\n    if (isRedirecting) { return <Redirect to='/'></Redirect>; }\r\n\r\n    return (\r\n        <div className=\"create-cardbox-page\">\r\n            <NetworkedCreateCardbox afterCreate={() => setIsRedirecting(true)}></NetworkedCreateCardbox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateCardboxPage;\r\n","import React, { useState } from 'react';\r\nimport './QuickEdit.css';\r\n\r\nexport interface QuickEditProps {\r\n    actions: {name: string, action: () => Promise<any>}[];\r\n}\r\n\r\nconst QuickEdit: React.FC<QuickEditProps> = ({ actions }) => {\r\n\r\n    const [inProgress, setInProgress] = useState(false);\r\n\r\n    const performAction = (action: () => Promise<void>): void => {\r\n        setInProgress(true);\r\n        action().finally(() => setInProgress(false));\r\n    }\r\n\r\n    return (\r\n        <div className=\"quick-edit\">\r\n            {inProgress && <div className=\"quick-edit__processing\">Processing...</div>}\r\n            {!inProgress && actions.map(({name, action}, idx) =>\r\n                <button className=\"quick-edit__button\" key={idx} onClick={() => performAction(action)}>{name}</button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuickEdit;\r\n","import React from 'react';\r\n\r\nimport QuickEdit from '../../components/QuickEdit/QuickEdit';\r\nimport { getCardbox, addWords } from '../../services/cardboxService';\r\nimport highprob from '../../data/highprob.json';\r\nimport highprob9 from '../../data/highprob9.json';\r\nimport fiveVowels from '../../data/5vowels.json';\r\n\r\nconst NetworkedQuickEdit: React.FC = () => {\r\n\r\n    const actions = [\r\n        {name: 'Add to High Probability', action: addToHighProb},\r\n        {name: 'Add to High Probability Nines', action: addToHighProb9},\r\n        {name: 'Add to 5 Vowels', action: addTo5Vowels}\r\n    ];\r\n\r\n    return <QuickEdit actions={actions}></QuickEdit>\r\n}\r\n\r\nconst addToHighProb = () =>\r\n    getCardbox('High Probability').then(cardbox => {\r\n        const wordsInCardbox = new Set(cardbox.words);\r\n        const wordsToAdd = highprob.filter(ws => ws.some(word => !wordsInCardbox.has(word))).slice(0, 100).flatMap(ws => ws);\r\n        return addWords('High Probability', wordsToAdd);\r\n    })\r\n\r\nconst addToHighProb9 = () =>\r\n    getCardbox('High Probability Nines').then(cardbox => {\r\n        const wordsInCardbox = new Set(cardbox.words);\r\n        const wordsToAdd = highprob9.filter(ws => ws.some(word => !wordsInCardbox.has(word))).slice(0, 100).flatMap(ws => ws);\r\n        return addWords('High Probability Nines', wordsToAdd);\r\n    })\r\n\r\nconst addTo5Vowels = () =>\r\n    getCardbox('5 Vowels').then(cardbox => {\r\n        const wordsInCardbox = new Set(cardbox.words);\r\n        const wordsToAdd = fiveVowels.filter(ws => ws.some(word => !wordsInCardbox.has(word))).slice(0, 100).flatMap(ws => ws);\r\n        return addWords('5 Vowels', wordsToAdd);\r\n    })\r\n\r\nexport default NetworkedQuickEdit;\r\n","import React from 'react';\r\n\r\nimport NetworkedQuickEdit from '../../containers/NetworkedQuickEdit/NetworkedQuickEdit';\r\n\r\nconst QuickEditPage: React.FC = () => {\r\n    return (\r\n        <NetworkedQuickEdit></NetworkedQuickEdit>\r\n    );\r\n};\r\n\r\nexport default QuickEditPage;\r\n","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport interface LoginProps {\r\n    doLogin: (email: string, password: string) => Promise<any>;\r\n}\r\n\r\nconst Login: React.FC<LoginProps> = ({doLogin}) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\"></Redirect>\r\n    }\r\n\r\n    return <div className=\"login\">\r\n        <label className=\"login__label\">\r\n            Email\r\n            <input type=\"email\" className=\"login__input\" value={email} onChange={e => setEmail(e.target.value)}></input>\r\n        </label>\r\n        <label className=\"login__label\">\r\n            Password\r\n            <input type=\"password\" className=\"login__input\" value={password} onChange={e => setPassword(e.target.value)}></input>\r\n        </label>\r\n        <button className=\"login__submit\" onClick={() => doLogin(email, password).then(() => setIsLoggedIn(true))}>Submit</button>\r\n    </div>\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport Login from '../../components/Login/Login';\r\n\r\nimport { login } from '../../services/loginService';\r\n\r\nconst NetworkedLogin: React.FC = () => {\r\n    return <Login doLogin={login}></Login>\r\n}\r\n\r\nexport default NetworkedLogin;\r\n","import React from 'react';\r\nimport './LoginPage.css';\r\nimport NetworkedLogin from '../../containers/NetworkedLogin/NetworkedLogin';\r\n\r\nconst LoginPage: React.FC = () => {\r\n    return <div className=\"login-page\">\r\n        <NetworkedLogin></NetworkedLogin>\r\n    </div>\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom';\nimport { isLoggedIn } from '../services/loginService';\nimport Navbar from '../components/Navbar/Navbar';\nimport AscensionQuizPage from '../pages/AscensionQuizPage/AscensionQuizPage';\nimport CardboxListPage from '../pages/CardboxListPage/CardboxListPage';\nimport CardboxQuizPage from '../pages/CardboxQuizPage/CardboxQuizPage';\nimport EditCardboxPage from '../pages/EditCardboxPage/EditCardboxPage';\nimport CreateCardboxPage from '../pages/CreateCardboxPage/CreateCardboxPage';\nimport QuickEditPage from '../pages/QuickEditPage/QuickEditPage';\nimport LoginPage from '../pages/LoginPage/LoginPage';\n\nconst App: React.FC = () => {\n    return (\n        <Router basename=\"/cardbox-ascension\">\n            <div className=\"app\">\n                <Routes></Routes>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n\nconst _Routes: React.FC = () => {\n\n    const loggedIn = isLoggedIn();\n\n    return (\n        <div className=\"app__container\">\n            <Navbar></Navbar>\n            <div className=\"app__content\">\n                {!loggedIn && <LoginPage></LoginPage>}\n                {loggedIn &&\n                    <Switch>\n                        <Route path=\"/learn/:cardbox\" component={CardboxQuizPage}></Route>\n                        <Route path=\"/edit/:cardbox\" component={EditCardboxPage}></Route>\n                        <Route path=\"/ascension\" component={AscensionQuizPage}></Route>\n                        <Route path=\"/create\" component={CreateCardboxPage}></Route>\n                        <Route path=\"/quick-edit\" component={QuickEditPage}></Route>\n                        <Route path=\"*\" component={CardboxListPage}></Route>\n                    </Switch>\n                }\n            </div>\n        </div>\n    );\n}\n\nconst Routes = withRouter(_Routes);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
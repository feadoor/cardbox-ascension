{"version":3,"sources":["services/firebase.ts","services/loginService.ts","components/Navbar/Navbar.tsx","components/CardboxSummary/CardboxSummary.tsx","components/CardboxList/CardboxList.tsx","hooks/useAsyncRequest.ts","services/cardboxService.ts","containers/NetworkedCardboxList/NetworkedCardboxList.tsx","pages/CardboxListPage/CardboxListPage.tsx","components/Answers/Answers.tsx","components/LetterCard/LetterCard.tsx","components/Scramble/Scramble.tsx","hooks/useTimer.ts","hooks/useInterval.ts","components/Timer/Timer.tsx","hooks/useEventEmitter.ts","components/Question/Question.tsx","components/Quiz/Quiz.tsx","components/CardboxQuiz/CardboxQuiz.tsx","containers/NetworkedCardboxQuiz/NetworkedCardboxQuiz.tsx","pages/CardboxQuizPage/CardboxQuizPage.tsx","components/EditCardbox/EditCardbox.tsx","containers/NetworkedEditCardbox/NetworkedEditCardbox.tsx","pages/EditCardboxPage/EditCardboxPage.tsx","components/CreateCardbox/CreateCardbox.tsx","containers/NetworkedCreateCardbox/NetworkedCreateCardbox.tsx","pages/CreateCardboxPage/CreateCardboxPage.tsx","components/QuickEdit/QuickEdit.tsx","containers/NetworkedQuickEdit/NetworkedQuickEdit.tsx","pages/QuickEditPage/QuickEditPage.tsx","components/Login/Login.tsx","containers/NetworkedLogin/NetworkedLogin.tsx","pages/LoginPage/LoginPage.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","appId","login","email","password","auth","signInWithEmailAndPassword","Navbar","className","to","CardboxSummary","name","size","hasQuestionsDue","CardboxList","cardboxes","map","cardbox","idx","key","useAsyncRequest","request","useState","undefined","result","setResult","error","setError","inProgress","setInProgress","isComplete","setIsComplete","doRequest","data","then","catch","getCardbox","firestore","collection","doc","get","id","setDuration","duration","update","addWords","words","wordsByKey","groupWordsByKey","Promise","all","Object","keys","runTransaction","transaction","cardboxRef","docRef","exists","existingAnswers","answers","dedup","fb","FieldValue","increment","set","asked","answeredCorrectly","level","due","Timestamp","now","Set","sort","groups","forEach","word","join","push","getNewDueDate","newLevel","timeNow","daysToAdd","Math","pow","min","seconds","nanoseconds","NetworkedCardboxList","querySnapshot","docs","where","limit","empty","CardboxListPage","Answers","ans","LetterCard","letter","Scramble","scramble","char","useTimer","emitter","timeRemaining","setTimeRemaining","isRunning","setIsRunning","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","time","max","emit","startTimer","stopTimer","progressBarStyle","remaining","width","Timer","eventEmitter","on","style","Emitter","callbacks","event","this","cb","Question","onQuestionEnded","questionActive","setQuestionActive","solved","setSolved","timerEmitter","containerRef","focus","startQuestion","answerQuestion","response","endQuestion","ref","tabIndex","onKeyPress","e","toUpperCase","onClick","newScramble","question","randomScramble","letters","lettersArr","length","jdx","floor","random","Quiz","_questions","questions","setQuestions","questionIdx","setQuestionIdx","shuffle","items","arr","keyFromScramble","CardboxQuiz","onQuestionAnswered","quizQuestions","NetworkedCardboxQuiz","doCardboxRequest","cardboxResult","cardboxError","cardboxInProgress","getDueQuestions","doQuestionsRequest","questionsResult","questionsError","questionsInProgress","correct","newDueDate","newAsked","newAnsweredCorrectly","CardboxQuizPage","match","params","EditCardbox","_duration","onChangesSaved","setWords","onSubmit","preventDefault","split","type","required","value","onChange","target","NetworkedEditCardbox","afterChangesSaved","EditCardboxPage","isRedirecting","setIsRedirecting","CreateCardbox","onCreate","setName","NetworkedCreateCardbox","afterCreate","createCardbox","CreateCardboxPage","QuickEdit","actions","action","finally","performAction","addToHighProb","questionCount","wordsToAdd","highprob","slice","flatMap","ws","addToHighProb9","highprob9","addToSingleCons","singleCons","NetworkedQuickEdit","QuickEditPage","Login","doLogin","setEmail","setPassword","isLoggedIn","setIsLoggedIn","NetworkedLogin","LoginPage","App","Routes","withRouter","loggedIn","currentUser","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.71919782.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n};\r\n\r\nexport default firebase.initializeApp(config);\r\n","import firebase from './firebase';\r\n\r\nexport const login = (email: string, password: string) =>\r\n    firebase.auth().signInWithEmailAndPassword(email, password);\r\n\r\nexport const isLoggedIn = () => !!firebase.auth().currentUser;\r\n","import React from 'react';\r\nimport './Navbar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <Link className=\"navbar__link\" to=\"/\">Home</Link>\r\n            <Link className=\"navbar__link\" to=\"/quick-edit\">Quick Edit</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './CardboxSummary.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface CardboxSummaryProps {\r\n    name: string;\r\n    size: number;\r\n    hasQuestionsDue: boolean;\r\n}\r\n\r\nconst CardboxSummary: React.FC<CardboxSummaryProps> = ({ name, size, hasQuestionsDue }) => {\r\n    return (\r\n        <div className=\"cardbox-summary\">\r\n            <div className=\"cardbox-summary__name\">{name} ({size})</div>\r\n            <div className={'cardbox-summary__status cardbox-summary__status--' + (hasQuestionsDue ? 'due' : 'stale')}>{hasQuestionsDue ? 'Questions Due' : 'No Questions Due'}</div>\r\n            <div className=\"cardbox-summary__actions\">\r\n                <Link className=\"cardbox-summary__action\" to={`/edit/${name}`}>Edit</Link>\r\n                <Link className=\"cardbox-summary__action\" to={`/learn/${name}`}>Learn</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardboxSummary;\r\n","import React from 'react';\r\nimport './CardboxList.css';\r\n\r\nimport CardboxSummary from '../CardboxSummary/CardboxSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface CardboxListProps {\r\n    cardboxes: {name: string, size: number, hasQuestionsDue: boolean}[];\r\n}\r\n\r\nconst CardboxList: React.FC<CardboxListProps> = ({ cardboxes }) => {\r\n    return (\r\n        <div className=\"cardbox-list\">\r\n            {cardboxes.map((cardbox, idx) =>\r\n                <CardboxSummary {...cardbox} key={idx}></CardboxSummary>\r\n            )}\r\n            <Link to=\"/create\" className=\"cardbox-list__fake-summary\">\r\n                <div className=\"cardbox-list__plus-line--vertical\"></div>\r\n                <div className=\"cardbox-list__plus-line--horizontal\"></div>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardboxList;\r\n","import { useState } from 'react';\r\n\r\nexport type AsyncRequest<T, R, E> = {\r\n    doRequest: (data: T) => Promise<void>,\r\n    result: R | undefined,\r\n    error: E | boolean | undefined,\r\n    inProgress: boolean,\r\n    isComplete: boolean,\r\n};\r\n\r\nconst useAsyncRequest = <T, R, E> (request: (data: T) => Promise<R>): AsyncRequest<T, R, E> => {\r\n\r\n    const [result, setResult] = useState<R | undefined>(undefined);\r\n    const [error, setError] = useState<E | boolean | undefined>(undefined);\r\n    const [inProgress, setInProgress] = useState(false);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n\r\n    const doRequest = (data: T) => {\r\n        setInProgress(true); setIsComplete(false); setResult(undefined); setError(undefined);\r\n        return request(data)\r\n            .then(result => {\r\n                setResult(result);\r\n                setInProgress(false);\r\n                setIsComplete(true);\r\n            })\r\n            .catch((error: E) => {\r\n                setError(error === undefined ? true : error);\r\n                setInProgress(false);\r\n            });\r\n    };\r\n\r\n    return { doRequest, result, error, inProgress, isComplete }\r\n}\r\n\r\nexport default useAsyncRequest;\r\n","import firebase from './firebase';\r\nimport fb from 'firebase/app';\r\n\r\nexport interface Cardbox {\r\n    name: string;\r\n    size: number;\r\n    duration: number;\r\n}\r\n\r\nexport interface Question {\r\n    letters: string;\r\n    answers: string[];\r\n    asked: number;\r\n    answeredCorrectly: number;\r\n    level: number;\r\n    due: Date;\r\n}\r\n\r\nexport const getCardbox = (cardbox: string): Promise<Cardbox> =>\r\n    firebase.firestore().collection('cardboxes').doc(cardbox).get().then(doc => ({\r\n        ...doc.data(),\r\n        name: doc.id\r\n    } as Cardbox));\r\n\r\nexport const getCardboxes = (): Promise<Cardbox[]> =>\r\n    firebase.firestore().collection('cardboxes').get().then(querySnapshot =>\r\n        querySnapshot.docs.map(doc => ({\r\n            ...doc.data(),\r\n            name: doc.id\r\n        } as Cardbox))\r\n    );\r\n\r\nexport const hasQuestionsDue = (cardbox: string): Promise<boolean> =>\r\n    firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions')\r\n        .where('due', '<=', fb.firestore.Timestamp.now()).limit(1).get().then(querySnapshot =>\r\n            !querySnapshot.empty\r\n        );\r\n\r\nexport const getDueQuestions = (cardbox: string): Promise<Question[]> =>\r\n    firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions')\r\n        .where('due', '<=', fb.firestore.Timestamp.now()).get().then(querySnapshot =>\r\n            querySnapshot.docs.map(doc => ({\r\n                ...doc.data(),\r\n                letters: doc.id\r\n            } as Question))\r\n        );\r\n\r\nexport const createCardbox = (name: string, duration: number): Promise<void> => {\r\n    const docRef = firebase.firestore().collection('cardboxes').doc(name);\r\n    return firebase.firestore().runTransaction(transaction =>\r\n        transaction.get(docRef).then(doc => {\r\n            if (!doc.exists) {\r\n                transaction.set(docRef, { size: 0, duration: duration });\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nexport const setDuration = (cardbox: string, duration: number): Promise<void> => {\r\n    return firebase.firestore().collection('cardboxes').doc(cardbox).update({ duration: duration });\r\n}\r\n\r\nexport const addWords = (cardbox: string, words: string[]): Promise<void[]> => {\r\n    const wordsByKey = groupWordsByKey(words);\r\n    return Promise.all(Object.keys(wordsByKey).map(key =>\r\n        firebase.firestore().runTransaction(transaction => {\r\n            const cardboxRef = firebase.firestore().collection('cardboxes').doc(cardbox);\r\n            const docRef = firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions').doc(key);\r\n            return transaction.get(docRef).then(doc => {\r\n                if (!doc.exists) {\r\n                    transaction.update(cardboxRef, { size: fb.firestore.FieldValue.increment(1) });\r\n                    transaction.set(docRef, { answers: wordsByKey[key], asked: 0, answeredCorrectly: 0, level: 0, due: fb.firestore.Timestamp.now() });\r\n                } else {\r\n                    const existingAnswers = (doc.data() as Question).answers;\r\n                    transaction.update(docRef, { answers: dedup([...existingAnswers, ...wordsByKey[key]]) });\r\n                }\r\n            })\r\n        })\r\n    ));\r\n}\r\n\r\nexport const answerQuestion = (cardbox: string, letters: string, correct: boolean) => {\r\n    const docRef = firebase.firestore().collection('cardboxes').doc(cardbox).collection('questions').doc(letters);\r\n    return firebase.firestore().runTransaction(transaction =>\r\n        transaction.get(docRef).then(doc => {\r\n            const data = doc.data() as Question;\r\n            const newLevel = correct ? data.level + 1 : 0;\r\n            const newDueDate = getNewDueDate(newLevel);\r\n            const newAsked = data.asked + 1;\r\n            const newAnsweredCorrectly = correct ? data.answeredCorrectly + 1 : data.answeredCorrectly;\r\n            transaction.update(docRef, { level: newLevel, due: newDueDate, asked: newAsked, answeredCorrectly: newAnsweredCorrectly });\r\n        })\r\n    );\r\n}\r\n\r\nconst dedup = (words: string[]): string[] => [...new Set(words)].sort();\r\n\r\nconst groupWordsByKey = (words: string[]): {[key: string]: string[]} => {\r\n    const groups: {[key: string]: string[]} = {};\r\n    words.forEach(word => {\r\n        const key = [...word].sort().join('');\r\n        if (groups[key] === undefined) groups[key] = [];\r\n        groups[key].push(word);\r\n    });\r\n    return groups;\r\n}\r\n\r\nconst getNewDueDate = (newLevel: number) => {\r\n    const timeNow = fb.firestore.Timestamp.now();\r\n    const secondsInDay = 60 * 60 * 24;\r\n    const daysToAdd = newLevel === 0 ? 0 : Math.pow(2, Math.min(newLevel, 9) - 1);\r\n    return new fb.firestore.Timestamp(timeNow.seconds + secondsInDay * daysToAdd, timeNow.nanoseconds);\r\n}\r\n","import React from 'react';\r\n\r\nimport CardboxList, { CardboxListProps } from '../../components/CardboxList/CardboxList';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\nimport { getCardboxes, hasQuestionsDue } from '../../services/cardboxService';\r\n\r\nconst NetworkedCardboxList: React.FC = () => {\r\n\r\n    const { doRequest, result, error, inProgress } = useAsyncRequest<void, CardboxListProps['cardboxes'], undefined>(() =>\r\n        getCardboxes().then(cardboxes => Promise.all(cardboxes.map(cardbox =>\r\n            hasQuestionsDue(cardbox.name).then(due => ({ name: cardbox.name, size: cardbox.size, hasQuestionsDue: due}))\r\n        )))\r\n    );\r\n\r\n    if (!inProgress && error === undefined && result === undefined) {\r\n        doRequest();\r\n    }\r\n\r\n    if (result === undefined) { return <div></div>; }\r\n\r\n    return <CardboxList cardboxes={result}></CardboxList>\r\n}\r\n\r\nexport default NetworkedCardboxList;\r\n","import React from 'react';\r\n\r\nimport NetworkedCardboxList from '../../containers/NetworkedCardboxList/NetworkedCardboxList';\r\n\r\nconst CardboxListPage: React.FC = () => {\r\n    return (\r\n        <NetworkedCardboxList></NetworkedCardboxList>\r\n    );\r\n};\r\n\r\nexport default CardboxListPage;\r\n","import React from 'react';\r\nimport './Answers.css';\r\n\r\nexport interface AnswersProps {\r\n    answers: string[];\r\n}\r\n\r\nconst Answers: React.FC<AnswersProps> = ({ answers }) => {\r\n    return (\r\n        <div className=\"answers\">\r\n            <ul className=\"answers__list\">\r\n                {answers.map((ans, idx) =>\r\n                    <li key={idx} className=\"answers__answer\">{ans}</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Answers;\r\n","import React from 'react';\r\nimport './LetterCard.css';\r\n\r\nexport interface LetterCardProps {\r\n    letter: string;\r\n}\r\n\r\nconst LetterCard: React.FC<LetterCardProps> = ({ letter }) => {\r\n    return (\r\n        <div className=\"letter-card\">{letter}</div>\r\n    );\r\n};\r\n\r\nexport default LetterCard;\r\n","import React from 'react';\r\nimport './Scramble.css';\r\n\r\nimport LetterCard from '../LetterCard/LetterCard';\r\n\r\nexport interface ScrambleProps {\r\n    scramble: string;\r\n}\r\n\r\nconst Scramble: React.FC<ScrambleProps> = ({ scramble }) => {\r\n    return (\r\n        <div className=\"scramble\">\r\n            {[...scramble].map((char, idx) =>\r\n                <LetterCard key={idx} letter={char}></LetterCard>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scramble;\r\n","import { useState } from 'react';\r\nimport { Emitter } from './useEventEmitter';\r\n\r\nimport useInterval from './useInterval';\r\n\r\nexport default function useTimer(seconds: number, emitter: Emitter<void>) {\r\n\r\n    const [timeRemaining, setTimeRemaining] = useState(seconds);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    useInterval(() => {\r\n        if (timeRemaining > 0) {\r\n            setTimeRemaining(time => Math.max(0, time - 0.03));\r\n        } else {\r\n            setIsRunning(false);\r\n            emitter.emit('expire');\r\n        }\r\n    }, isRunning ? 30 : null);\r\n\r\n    const startTimer = () => {\r\n        setTimeRemaining(seconds);\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    return { startTimer, stopTimer, timeRemaining };\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function useInterval(callback: () => void, delay: number | null) {\r\n\r\n    const savedCallback = useRef<() => void>();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (delay !== null) {\r\n            let id = setInterval(() => savedCallback.current && savedCallback.current(), delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nimport useTimer from '../../hooks/useTimer';\r\nimport { Emitter } from '../../hooks/useEventEmitter';\r\n\r\nexport interface TimerProps {\r\n    seconds: number;\r\n    eventEmitter: Emitter<void>;\r\n}\r\n\r\nconst Timer: React.FC<TimerProps> = ({ seconds, eventEmitter }) => {\r\n\r\n    const { startTimer, stopTimer, timeRemaining } = useTimer(seconds, eventEmitter);\r\n    useEffect(() => eventEmitter.on('start', () => startTimer()), []);\r\n    useEffect(() => eventEmitter.on('stop', () => stopTimer()), []);\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <div className=\"timer__progress\" style={progressBarStyle(timeRemaining, seconds)}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst progressBarStyle = (remaining: number, duration: number) => ({\r\n    width: `${100 * remaining / duration}%`\r\n});\r\n\r\nexport default Timer;\r\n","import { useState } from 'react';\r\n\r\nexport class Emitter<T> {\r\n\r\n    private callbacks: {[s: string]: ((_: T) => void)[]} = {};\r\n\r\n    public emit(event: string, data: T): void {\r\n        this.callbacks[event] && this.callbacks[event].forEach(cb => cb(data));\r\n    }\r\n\r\n    public on(event: string, cb: (_: T) => void) {\r\n        if (!this.callbacks[event]) this.callbacks[event] = [];\r\n        this.callbacks[event].push(cb);\r\n    }\r\n}\r\n\r\nexport default function useEventEmitter<T>() {\r\n    const eventEmitter = useState(new Emitter<T>())[0];\r\n    return eventEmitter;\r\n}\r\n","import React, { useEffect, useState, useRef, KeyboardEvent } from 'react';\r\nimport './Question.css';\r\n\r\nimport Answers from '../Answers/Answers';\r\nimport Scramble from '../Scramble/Scramble';\r\nimport Timer from '../Timer/Timer';\r\n\r\nimport useEventEmitter from '../../hooks/useEventEmitter';\r\n\r\nexport interface QuestionProps {\r\n    idx: number;\r\n    scramble: string;\r\n    answers: string[];\r\n    duration: number;\r\n    onQuestionEnded: (solved: boolean) => void;\r\n}\r\n\r\nconst Question: React.FC<QuestionProps> = ({ idx, scramble, answers, duration, onQuestionEnded }) => {\r\n\r\n    const [questionActive, setQuestionActive] = useState(true);\r\n    const [solved, setSolved] = useState(true);\r\n    const timerEmitter = useEventEmitter<void>();\r\n\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        containerRef.current && containerRef.current.focus();\r\n    });\r\n\r\n    useEffect(() => startQuestion(), [idx]);\r\n    useEffect(() => timerEmitter.on('expire', () => answerQuestion(false)), []);\r\n\r\n    const startQuestion = () => {\r\n        setQuestionActive(true);\r\n        timerEmitter.emit('start');\r\n    };\r\n\r\n    const answerQuestion = (response: boolean) => {\r\n        setQuestionActive(false);\r\n        setSolved(response);\r\n        timerEmitter.emit('stop');\r\n    };\r\n\r\n    const endQuestion = () => {\r\n        setQuestionActive(true);\r\n        onQuestionEnded(solved);\r\n    }\r\n\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n        if (questionActive && e.key.toUpperCase() === ' ') answerQuestion(true);\r\n        else if (questionActive && e.key.toUpperCase() === 'M') answerQuestion(false);\r\n        else if (!questionActive && e.key.toUpperCase() === 'M') setSolved(!solved);\r\n        else if (!questionActive && e.key.toUpperCase() === ' ') endQuestion();\r\n    };\r\n\r\n    return (\r\n        <div className=\"question\" ref={containerRef} tabIndex={-1} onKeyPress={handleKeyPress}>\r\n            <div className=\"question__scramble-and-timer\">\r\n                <Scramble scramble={scramble}></Scramble>\r\n                <Timer seconds={duration} eventEmitter={timerEmitter}></Timer>\r\n            </div>\r\n            {questionActive && <div className=\"question__response\">\r\n                <button className=\"question__response-button question__response-button--solved\" onClick={() => answerQuestion(true)}>Solved</button>\r\n                <button className=\"question__response-button question__response-button--missed\" onClick={() => answerQuestion(false)}>Missed</button>\r\n            </div>}\r\n            {!questionActive && <div className=\"question__results\">\r\n                <Answers answers={answers}></Answers>\r\n                <div className=\"question__confirm\">\r\n                    <button className={'question__response-button question__response-button--' + (solved ? 'solved' : 'missed')} onClick={() => setSolved(!solved)}>{solved ? 'Solved' : 'Missed'}</button>\r\n                    <button className=\"question__response-button\" onClick={() => endQuestion()}>Next question</button>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Question;\r\n","import React, { useState } from 'react';\r\nimport './Quiz.css';\r\n\r\nimport Question from '../Question/Question';\r\n\r\nexport interface QuizQuestion {\r\n    scramble: string;\r\n    answers: string[];\r\n}\r\n\r\nexport interface QuizProps {\r\n    questions: QuizQuestion[];\r\n    duration: number;\r\n    onQuestionEnded: (scramble: string, solved: boolean) => void;\r\n}\r\n\r\nconst Quiz: React.FC<QuizProps> = ({ questions: _questions, duration, onQuestionEnded }) => {\r\n\r\n    const [questions, setQuestions] = useState(_questions);\r\n    const [questionIdx, setQuestionIdx] = useState(0);\r\n\r\n    const endQuestion = (solved: boolean) => {\r\n        onQuestionEnded(questions[questionIdx].scramble, solved);\r\n        if (!solved) setQuestions([...questions, newScramble(questions[questionIdx])]);\r\n        setQuestionIdx(idx => idx + 1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz\">\r\n            {questionIdx >= questions.length && <div className=\"quiz__ended\">\r\n                No more questions!\r\n            </div>}\r\n            {questionIdx < questions.length && <div className=\"quiz__question\">\r\n                <div className=\"quiz__heading\">Question {questionIdx + 1} of {questions.length}</div>\r\n                <Question idx={questionIdx} scramble={questions[questionIdx].scramble} answers={questions[questionIdx].answers} duration={duration} onQuestionEnded={endQuestion}></Question>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst newScramble = (question: QuizQuestion) => ({\r\n    ...question,\r\n    scramble: randomScramble(question.scramble)\r\n});\r\n\r\nconst randomScramble = (letters: string) => {\r\n    const lettersArr = [...letters];\r\n    for (let idx = lettersArr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [lettersArr[idx], lettersArr[jdx]] = [lettersArr[jdx], lettersArr[idx]];\r\n    }\r\n    return lettersArr.join('');\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\n\r\nimport { Question } from '../../services/cardboxService';\r\nimport Quiz from '../Quiz/Quiz';\r\n\r\nexport interface CardboxQuizProps {\r\n    questions: Question[];\r\n    duration: number;\r\n    onQuestionAnswered: (letters: string, solved: boolean) => void;\r\n}\r\n\r\nconst CardboxQuiz: React.FC<CardboxQuizProps> = ({ questions, duration, onQuestionAnswered }) => {\r\n\r\n    const quizQuestions = shuffle(questions.map(question => ({\r\n        scramble: randomScramble(question.letters),\r\n        answers: question.answers\r\n    })));\r\n\r\n    return (\r\n        <Quiz questions={quizQuestions} duration={duration} onQuestionEnded={(scramble, solved) => onQuestionAnswered(keyFromScramble(scramble), solved)}></Quiz>\r\n    );\r\n};\r\n\r\nconst shuffle = <T extends any>(items: T[]): T[] => {\r\n    const arr = [...items];\r\n    for (let idx = arr.length - 1; idx > 0; idx -= 1) {\r\n        const jdx = Math.floor(Math.random() * (idx + 1));\r\n        [arr[idx], arr[jdx]] = [arr[jdx], arr[idx]];\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst randomScramble = (letters: string) => {\r\n    return shuffle([...letters]).join('');\r\n};\r\n\r\nconst keyFromScramble = (scramble: string) => [...scramble].sort().join('');\r\n\r\nexport default CardboxQuiz;\r\n","import React from 'react';\r\n\r\nimport { getDueQuestions, getCardbox, answerQuestion } from '../../services/cardboxService';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\n\r\nimport CardboxQuiz from '../../components/CardboxQuiz/CardboxQuiz';\r\n\r\nexport interface NetworkedCardboxQuizProps {\r\n    cardbox: string;\r\n}\r\n\r\nconst NetworkedCardboxQuiz: React.FC<NetworkedCardboxQuizProps> = ({ cardbox }) => {\r\n\r\n    const { doRequest: doCardboxRequest, result: cardboxResult, error: cardboxError, inProgress: cardboxInProgress } = useAsyncRequest((cardbox: string) =>\r\n        getCardbox(cardbox)\r\n    )\r\n\r\n    const { doRequest: doQuestionsRequest, result: questionsResult, error: questionsError, inProgress: questionsInProgress } = useAsyncRequest((cardbox: string) =>\r\n        getDueQuestions(cardbox)\r\n    );\r\n\r\n    if (!cardboxInProgress && cardboxError === undefined && cardboxResult === undefined) {\r\n        doCardboxRequest(cardbox);\r\n    }\r\n\r\n    if (!questionsInProgress && questionsError === undefined && questionsResult === undefined) {\r\n        doQuestionsRequest(cardbox);\r\n    }\r\n\r\n    if (cardboxResult === undefined || questionsResult === undefined) { return <div></div>; }\r\n\r\n    return <CardboxQuiz duration={cardboxResult.duration} questions={questionsResult} onQuestionAnswered={(letters, solved) => answerQuestion(cardboxResult.name, letters, solved)}></CardboxQuiz>;\r\n};\r\n\r\nexport default NetworkedCardboxQuiz;\r\n","import React from 'react';\r\n\r\nimport { match } from 'react-router-dom';\r\nimport NetworkedCardboxQuiz from '../../containers/NetworkedCardboxQuiz/NetworkedCardboxQuiz';\r\n\r\nexport interface CardboxQuizPageParams {\r\n    cardbox: string;\r\n}\r\n\r\nexport interface CardboxQuizPageProps {\r\n    match: match<CardboxQuizPageParams>;\r\n}\r\n\r\nconst CardboxQuizPage: React.FC<CardboxQuizPageProps> = ({ match }) => {\r\n    return (\r\n        <NetworkedCardboxQuiz cardbox={match.params.cardbox}></NetworkedCardboxQuiz>\r\n    );\r\n};\r\n\r\nexport default CardboxQuizPage;\r\n","import React, { useState, FormEvent } from 'react';\r\nimport './EditCardbox.css';\r\n\r\nexport interface EditCardboxProps {\r\n    cardbox: string;\r\n    duration: number;\r\n    onChangesSaved: (duration: number, words: string[]) => void;\r\n}\r\n\r\nconst EditCardbox: React.FC<EditCardboxProps> = ({ cardbox, duration: _duration, onChangesSaved }) => {\r\n\r\n    const [duration, setDuration] = useState(_duration);\r\n    const [words, setWords] = useState('');\r\n\r\n    const handleSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        onChangesSaved(duration, words.split(/\\s+/));\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-cardbox\">\r\n            <div className=\"edit-cardbox__title\">Edit {cardbox}</div>\r\n            <form className=\"edit-cardbox__form\" onSubmit={handleSubmit}>\r\n                <label className=\"edit-cardbox__form-field\">\r\n                    Duration\r\n                    <input className=\"edit-cardbox__form-input\" type=\"number\" required value={duration} onChange={e => setDuration(+e.target.value)}></input>\r\n                </label>\r\n                <label className=\"edit-cardbox__form-field\">\r\n                    Add words\r\n                    <textarea className=\"edit-cardbox__form-textarea\" value={words} onChange={e => setWords(e.target.value)}></textarea>\r\n                </label>\r\n                <button type=\"submit\" className=\"edit-cardbox__form-button\">Save Changes</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditCardbox;\r\n","import React from 'react';\r\n\r\nimport EditCardbox from '../../components/EditCardbox/EditCardbox';\r\nimport useAsyncRequest from '../../hooks/useAsyncRequest';\r\nimport { getCardbox, setDuration, addWords,  } from '../../services/cardboxService';\r\n\r\nexport interface NetworkedEditCardboxProps {\r\n    cardbox: string;\r\n    afterChangesSaved: () => void;\r\n}\r\n\r\nconst NetworkedEditCardbox: React.FC<NetworkedEditCardboxProps> = ({ cardbox, afterChangesSaved }) => {\r\n\r\n    const saveChanges = (duration: number, words: string[]) => Promise.all([\r\n        setDuration(cardbox, duration),\r\n        addWords(cardbox, words)\r\n    ]).then(afterChangesSaved);\r\n\r\n    const { doRequest, result, error, inProgress } = useAsyncRequest((cardbox: string) =>\r\n        getCardbox(cardbox)\r\n    );\r\n\r\n    if (!inProgress && error === undefined && result === undefined) {\r\n        doRequest(cardbox);\r\n    }\r\n\r\n    if (result === undefined) { return <div></div>; }\r\n\r\n    return <EditCardbox cardbox={cardbox} duration={result.duration} onChangesSaved={saveChanges}></EditCardbox>\r\n};\r\n\r\nexport default NetworkedEditCardbox;\r\n","import React, { useState } from 'react';\r\nimport './EditCardboxPage.css';\r\n\r\nimport { match, Redirect } from 'react-router-dom';\r\nimport NetworkedEditCardbox from '../../containers/NetworkedEditCardbox/NetworkedEditCardbox';\r\n\r\nexport interface EditCardboxPageParams {\r\n    cardbox: string;\r\n}\r\n\r\nexport interface EditCardboxPageProps {\r\n    match: match<EditCardboxPageParams>;\r\n}\r\n\r\nconst EditCardboxPage: React.FC<EditCardboxPageProps> = ({ match }) => {\r\n\r\n    const [isRedirecting, setIsRedirecting] = useState(false);\r\n\r\n    if (isRedirecting) { return <Redirect to='/'></Redirect>; }\r\n\r\n    return (\r\n        <div className=\"edit-cardbox-page\">\r\n            <NetworkedEditCardbox cardbox={match.params.cardbox} afterChangesSaved={() => setIsRedirecting(true)}></NetworkedEditCardbox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditCardboxPage;\r\n","import React, { useState, FormEvent } from 'react';\r\nimport './CreateCardbox.css';\r\n\r\nexport interface CreateCardboxProps {\r\n    onCreate: (name: string, duration: number) => void;\r\n}\r\n\r\nconst CreateCardbox: React.FC<CreateCardboxProps> = ({ onCreate }) => {\r\n\r\n    const [name, setName] = useState('')\r\n    const [duration, setDuration] = useState(10);\r\n\r\n    const handleSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        onCreate(name, duration);\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-cardbox\">\r\n            <div className=\"create-cardbox__title\">Create Cardbox</div>\r\n            <form className=\"create-cardbox__form\" onSubmit={handleSubmit}>\r\n            <label className=\"create-cardbox__form-field\">\r\n                    Name\r\n                    <input className=\"create-cardbox__form-input\" type=\"text\" required value={name} onChange={e => setName(e.target.value)}></input>\r\n                </label>\r\n                <label className=\"create-cardbox__form-field\">\r\n                    Duration\r\n                    <input className=\"create-cardbox__form-input\" type=\"number\" required value={duration} onChange={e => setDuration(+e.target.value)}></input>\r\n                </label>\r\n                <button type=\"submit\" className=\"create-cardbox__form-button\">Save Changes</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateCardbox;\r\n","import React from 'react';\r\n\r\nimport CreateCardbox from '../../components/CreateCardbox/CreateCardbox';\r\nimport { createCardbox } from '../../services/cardboxService';\r\n\r\nexport interface NetworkedCreateCardboxProps {\r\n    afterCreate: () => void;\r\n}\r\n\r\nconst NetworkedCreateCardbox: React.FC<NetworkedCreateCardboxProps> = ({ afterCreate }) => {\r\n\r\n    const doCreate = (name: string, duration: number) => createCardbox(name, duration)\r\n        .then(afterCreate);\r\n\r\n    return (\r\n        <CreateCardbox onCreate={doCreate}></CreateCardbox>\r\n    );\r\n};\r\n\r\nexport default NetworkedCreateCardbox;\r\n","import React, { useState } from 'react';\r\nimport './CreateCardboxPage.css';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport NetworkedCreateCardbox from '../../containers/NetworkedCreateCardbox/NetworkedCreateCardbox';\r\n\r\nconst CreateCardboxPage: React.FC = () => {\r\n\r\n    const [isRedirecting, setIsRedirecting] = useState(false);\r\n\r\n    if (isRedirecting) { return <Redirect to='/'></Redirect>; }\r\n\r\n    return (\r\n        <div className=\"create-cardbox-page\">\r\n            <NetworkedCreateCardbox afterCreate={() => setIsRedirecting(true)}></NetworkedCreateCardbox>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateCardboxPage;\r\n","import React, { useState } from 'react';\r\nimport './QuickEdit.css';\r\n\r\nexport interface QuickEditProps {\r\n    actions: {name: string, action: () => Promise<any>}[];\r\n}\r\n\r\nconst QuickEdit: React.FC<QuickEditProps> = ({ actions }) => {\r\n\r\n    const [inProgress, setInProgress] = useState(false);\r\n\r\n    const performAction = (action: () => Promise<void>): void => {\r\n        setInProgress(true);\r\n        action().finally(() => setInProgress(false));\r\n    }\r\n\r\n    return (\r\n        <div className=\"quick-edit\">\r\n            {inProgress && <div className=\"quick-edit__processing\">Processing...</div>}\r\n            {!inProgress && actions.map(({name, action}, idx) =>\r\n                <button className=\"quick-edit__button\" key={idx} onClick={() => performAction(action)}>{name}</button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuickEdit;\r\n","import React from 'react';\r\n\r\nimport QuickEdit from '../../components/QuickEdit/QuickEdit';\r\nimport { getCardbox, addWords } from '../../services/cardboxService';\r\nimport highprob from '../../data/highprob.json';\r\nimport highprob9 from '../../data/highprob9.json';\r\nimport singleCons from '../../data/single_cons.json';\r\n\r\nconst NetworkedQuickEdit: React.FC = () => {\r\n\r\n    const actions = [\r\n        {name: 'Add to High Probability', action: addToHighProb},\r\n        {name: 'Add to High Probability Nines', action: addToHighProb9},\r\n        {name: 'Add to Single Conundrums', action: addToSingleCons},\r\n    ];\r\n\r\n    return <QuickEdit actions={actions}></QuickEdit>\r\n}\r\n\r\nconst addToHighProb = () =>\r\n    getCardbox('High Probability').then(cardbox => {\r\n        const questionCount = cardbox.size;\r\n        const wordsToAdd = highprob.slice(questionCount, questionCount + 100).flatMap(ws => ws);\r\n        return addWords('High Probability', wordsToAdd);\r\n    })\r\n\r\nconst addToHighProb9 = () =>\r\n    getCardbox('High Probability Nines').then(cardbox => {\r\n        const questionCount = cardbox.size;\r\n        const wordsToAdd = highprob9.slice(questionCount, questionCount + 100).flatMap(ws => ws);\r\n        return addWords('High Probability Nines', wordsToAdd);\r\n    })\r\n\r\nconst addToSingleCons = () =>\r\n    getCardbox('Single Conundrums').then(cardbox => {\r\n        const questionCount = cardbox.size;\r\n        const wordsToAdd = singleCons.slice(questionCount, questionCount + 200).flatMap(ws => ws);\r\n        return addWords('Single Conundrums', wordsToAdd);\r\n    })\r\n\r\nexport default NetworkedQuickEdit;\r\n","import React from 'react';\r\n\r\nimport NetworkedQuickEdit from '../../containers/NetworkedQuickEdit/NetworkedQuickEdit';\r\n\r\nconst QuickEditPage: React.FC = () => {\r\n    return (\r\n        <NetworkedQuickEdit></NetworkedQuickEdit>\r\n    );\r\n};\r\n\r\nexport default QuickEditPage;\r\n","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport interface LoginProps {\r\n    doLogin: (email: string, password: string) => Promise<any>;\r\n}\r\n\r\nconst Login: React.FC<LoginProps> = ({doLogin}) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\"></Redirect>\r\n    }\r\n\r\n    return <div className=\"login\">\r\n        <label className=\"login__label\">\r\n            Email\r\n            <input type=\"email\" className=\"login__input\" value={email} onChange={e => setEmail(e.target.value)}></input>\r\n        </label>\r\n        <label className=\"login__label\">\r\n            Password\r\n            <input type=\"password\" className=\"login__input\" value={password} onChange={e => setPassword(e.target.value)}></input>\r\n        </label>\r\n        <button className=\"login__submit\" onClick={() => doLogin(email, password).then(() => setIsLoggedIn(true))}>Submit</button>\r\n    </div>\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport Login from '../../components/Login/Login';\r\n\r\nimport { login } from '../../services/loginService';\r\n\r\nconst NetworkedLogin: React.FC = () => {\r\n    return <Login doLogin={login}></Login>\r\n}\r\n\r\nexport default NetworkedLogin;\r\n","import React from 'react';\r\nimport './LoginPage.css';\r\nimport NetworkedLogin from '../../containers/NetworkedLogin/NetworkedLogin';\r\n\r\nconst LoginPage: React.FC = () => {\r\n    return <div className=\"login-page\">\r\n        <NetworkedLogin></NetworkedLogin>\r\n    </div>\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, withRouter } from 'react-router-dom';\nimport { isLoggedIn } from '../services/loginService';\nimport Navbar from '../components/Navbar/Navbar';\nimport CardboxListPage from '../pages/CardboxListPage/CardboxListPage';\nimport CardboxQuizPage from '../pages/CardboxQuizPage/CardboxQuizPage';\nimport EditCardboxPage from '../pages/EditCardboxPage/EditCardboxPage';\nimport CreateCardboxPage from '../pages/CreateCardboxPage/CreateCardboxPage';\nimport QuickEditPage from '../pages/QuickEditPage/QuickEditPage';\nimport LoginPage from '../pages/LoginPage/LoginPage';\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div className=\"app\">\n                <Routes></Routes>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n\nconst _Routes: React.FC = () => {\n\n    const loggedIn = isLoggedIn();\n\n    return (\n        <div className=\"app__container\">\n            <Navbar></Navbar>\n            <div className=\"app__content\">\n                {!loggedIn && <LoginPage></LoginPage>}\n                {loggedIn &&\n                    <Switch>\n                        <Route path=\"/learn/:cardbox\" component={CardboxQuizPage}></Route>\n                        <Route path=\"/edit/:cardbox\" component={EditCardboxPage}></Route>\n                        <Route path=\"/create\" component={CreateCardboxPage}></Route>\n                        <Route path=\"/quick-edit\" component={QuickEditPage}></Route>\n                        <Route path=\"*\" component={CardboxListPage}></Route>\n                    </Switch>\n                }\n            </div>\n        </div>\n    );\n}\n\nconst Routes = withRouter(_Routes);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}